--BattleDefine.txt
--@breif 战斗预定义
--@data 2018/3/10

--@brief c#引用
local CSVector3 = CS.UnityEngine.Vector3
local CSLog = CS.GameTool.Log

--@brief 碰撞预定义
BlockType = {
	None = 0,
	Collect = 1,
	Hide = 2,
}

--角色透明度预定义
TransLevelDefine = {
	Normal = 0,		--常规
	Hide = 1,		--隐藏
	Trans = 2,		--半透明
}

--@breif 战斗预定义
BattleDefine = {
	CommandTime = 0.025,	--逻辑帧刷新时间
	RendererDelay = 3,		--动画补间
	CommandStart = 6,		--逻辑帧本地缓存
	CommandStep = 1,		--驱动帧步伐

	SecondToFrameRate = 45,	--秒转帧率帧率

	PosRate = 100,		    --位置前后端转换系数

	PlayerSpeed = 0.1,		--移动速度
	PlayerRadius = 0.5,		--碰撞半径
	PlayerHeight = 1,		--碰撞高度
}


--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************位置相关 Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--@brief 方向预定义
BattleDir = {
	None = 0,	--停止
	Up = 1,		
	UpLeft = 2,
	Left = 3,

	DownLeft = 4,
	Down = 5,
	DownRight = 6,

	Right = 7,
	UpRight = 8,
}

BattleDirDefine = {
	UpLeft = CSVector3(-1, 0, 1),
	UpRight = CSVector3(1, 0, 1),
	DownLeft = CSVector3(-1, 0, -1),
	DownRight = CSVector3(1, 0, -1),
}
--@brief 获得对应方向的方向向量
function BattleDirDefine:GetDirPos(dir)
	if dir == BattleDir.Up then
		return CSVector3.forward

	elseif dir == BattleDir.UpLeft then
		return BattleDirDefine.UpLeft

	elseif dir == BattleDir.Left then
		return CSVector3.left

	elseif dir == BattleDir.DownLeft then
		return BattleDirDefine.DownLeft

	elseif dir == BattleDir.Down then
		return CSVector3.back

	elseif dir == BattleDir.DownRight then
		return BattleDirDefine.DownRight

	elseif dir == BattleDir.Right then
		return CSVector3.right

	elseif dir == BattleDir.UpRight then
		return BattleDirDefine.UpRight
	end
	return CSVector3.zero
end
--@brief 获得对应方向的方向向量列表
function BattleDirDefine:GetDirList(dir)
	if not BattleDirDefine.m_tList then
		BattleDirDefine.m_tList = {}
		
		BattleDirDefine.m_tList[BattleDir.Up] = {CSVector3.forward, CSVector3.right}
		BattleDirDefine.m_tList[BattleDir.Down] = {CSVector3.back, CSVector3.left}
		BattleDirDefine.m_tList[BattleDir.Left] = {CSVector3.left, CSVector3.forward}
		BattleDirDefine.m_tList[BattleDir.Right] = {CSVector3.right, CSVector3.back}

		BattleDirDefine.m_tList[BattleDir.UpLeft] = {BattleDirDefine.UpLeft, CSVector3.forward, CSVector3.left}
		BattleDirDefine.m_tList[BattleDir.UpRight] = {BattleDirDefine.UpRight, CSVector3.forward, CSVector3.right}
		BattleDirDefine.m_tList[BattleDir.DownLeft] = {BattleDirDefine.DownLeft, CSVector3.back, CSVector3.left}
		BattleDirDefine.m_tList[BattleDir.DownRight] = {BattleDirDefine.DownRight, CSVector3.back, CSVector3.right}
	end
	return BattleDirDefine.m_tList[dir] or {}
end

--@brief 获取服务器坐标
function BattleDefine:GetServerPos(tx,ty,tz)
	local posX,posY,posZ = math.floor(tx * BattleDefine.PosRate),math.floor(ty * BattleDefine.PosRate),math.floor(tz * BattleDefine.PosRate)
	return CS.UnityEngine.Vector3(posX,posY,posZ)
end

--@brief 获取客户端坐标
function BattleDefine:GetClientPos(tx,ty,tz)
	local posX,posY,posZ = tx/BattleDefine.PosRate,ty/BattleDefine.PosRate,tz/BattleDefine.PosRate
	
	return CS.UnityEngine.Vector3(posX,posY,posZ)
end

--@brief 秒转换逻辑帧数
--@param time 秒
function BattleDefine:GetFrameBySecond(second)
	if second <= 0 then
		return second
	end
	
	return math.floor(second * BattleDefine.SecondToFrameRate)
end


--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************位置相关 End*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************战斗通用方法*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 计算点公式

--@brief 检测碰撞
function BattleDefine:CheckCollider(colliderA,colliderB)
	local ay,by = BattleDefine:GetColliderCenteY(colliderA,colliderB)
	local posA = GetPosTab(colliderA.m_tPos.x, ay, colliderA.m_tPos.z)
	local posB = GetPosTab(colliderB.m_tPos.x, by, colliderB.m_tPos.z)
	if CSVector3.Distance(posA,posB) <= colliderA.m_nRaidus + colliderB.m_nRaidus then
		return true
	end
	return false
end

--@brief 获取最接近的y轴坐标
function BattleDefine:GetColliderCenteY(colliderA,colliderB)
	local ay = colliderA.m_tPos.y
	local ah = colliderA.m_nHeight

	local by = colliderB.m_tPos.y
	local bh = colliderB.m_nHeight

	--计算a点最小值，最大值
	local aMin = ay - ah
	local aMax = ay + ah
	--计算b点最小值，最大值
	local bMin = by - bh
	local bMax = by + bh
	
	--ab相交 取其一
	if (aMin >= bMin) and (aMin <= bMax) then
		return aMin,aMin
	end
	if (aMax >= bMin) and (aMax <= bMax) then
		return aMax,aMax
	end

	if (bMin >= aMin) and (bMin <= aMax) then
		return bMin,bMin
	end
	if (bMax >= aMin) and (bMax <= aMax) then
		return bMax,bMax
	end

	--不相交 取最接近两点
	if aMin > bMin then
		return aMin,bMax
	else
		return aMax,bMin
	end

end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--********************************************************战斗通用方法*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************全局事件 Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 全局战斗事件
GBattleEvent = {
	BattleDispatcher = nil,		--事件发送器
}


--@breif 网络事件
BATTLE_EVENT = {
	ADD_CHARACTER = "BATTLE_EVENT_ADD_CHARACTER", 	--添加玩家
	REMOVE_CHARACTER = "BATTLE_EVENT_REMOVE_CHARACTER",		--移除玩家
	UPDATE_CHARACTRE_POS = "BATTLE_EVENT_UPDATE_CHARACTRE_POS", --刷新玩家位置
	UPDATE_CHARACTER_HP = "BATTLE_EVENT_UPDATE_CHARACTER_HP",	--刷新玩家hp 
	ADD_CHARACTER_HURT_NUM = "BATTLE_EVENT_ADD_CHARACTER_HURT_NUM",	--添加飚血动画

	CHARACTER_DEAD = "BATTLE_EVENT_CHARACTER_DEAD",	--玩家死亡

	UPDATE_CAMERA = "BATTLE_EVENT_UPDATE_CAMERA",		--刷新镜头
	UPDATE_SCENE_POS = "BATTLE_EVENT_UPDATE_SCENE_POS",	--刷新场景中心点	
	START_GAME = "BATTLE_EVENT_START_GAME",				--开始游戏
	INIT_DATA_COMPLETE = "BATTLE_EVENT_INIT_DATA_COMPLETE",	--数据初始化完成

	UPDATE_CHARACTER_GLASS = "BATTLE_EVENT_UPDATE_CHARACTER_GLASS",	 --刷新草丛id
	RUSH_MAP_POINT  = "BATTLE_EVENT_RUSH_MAP_POINT",		--刷新毒圈中心

	BATTLE_MAP_ALL_ITEMS="BATTLE_EVENT_BATTLE_MAP_ALL_ITEMS",	--接受人物跟物资数据
	PICK_ITEM="BATTLE_EVENT_MAP_PICK_ITEM",				--拾取Item
	UPDATE_MAP_ITEMS="BATTLE_EVENT_UPDATE_MAP_ITEMS",

	UPDATE_ROLE_EQUIPT="BATTLE_EVENT_UPDATE_ROLE_EQUIPT," 			--通知刷新背包装备

}
--@breif 获取战斗事件管理器
function GBattleEvent:GetDispatcher()
	if GBattleEvent.BattleDispatcher == nil then 
		GBattleEvent.BattleDispatcher = EventDispatcher:Create() 
	end
	return GBattleEvent.BattleDispatcher
end

--@breif 清理战斗事件管理器（战斗退出清理）
function GBattleEvent:RemoveDispatcher()
	if GBattleEvent.BattleDispatcher == nil then 
		GBattleEvent.BattleDispatcher:RemoveEvent()
	end
	GBattleEvent.BattleDispatcher = nil
end

--@brief 战斗对象结构
function GBattleEvent:GetBattleData(battleId,careerType,pos,camp,list)
	local data = {}
	data.battleId = battleId or 1
	data.careerType = careerType or CareerType.FashShi
	data.pos = pos or CSVector3(100,0,100)
	data.camp = camp or 1
	data.attriList = list
	return data
end

--@brief 战斗对象结构
function GBattleEvent:GetCameraData(cameraType,pos)
	local data = {}
	data.cameraType = cameraType or BattleCameraType.Move
	data.pos = pos or CSVector3.zero
	return data
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************全局事件 End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
