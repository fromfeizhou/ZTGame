--SkillActionParse.txt
--@breif 技能解析
--@data 2018/03/19

--@brief c#引用
local CSLog = CS.GameTool.Log

SkillActionParse = {
	m_nOwnerId = nil,		--拥有者id
	m_tOwner = nil,			--拥有者
	m_nStartFrame = nil,	--起始帧
	m_nSkillId = nil,		--技能id
	m_tSkillPos = nil,		--技能位置
	m_nTargetId = nil,		--选中目标
	m_tActionList = nil,	--动作列表
	m_bFinish = nil,		--结束标记
}
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
--@param owner 使用者
--@param skillId 技能id
function SkillActionParse:Create(skillCommand)
	local obj = {}
	setmetatable( obj, { __index = SkillActionParse })
	obj:Init(skillCommand)
	return obj
end

--@brief 初始化
function SkillActionParse:Init(skillCommand)
	CSLog("SkillActionParse:Init")
	self.m_nOwnerId = skillCommand.m_nBattleId

	self.m_tOwner = GlobalBattleCtrl:GetCharacterDic()[self.m_nOwnerId]
	if not self.m_tOwner then
		self:Done()
		return
	end
	self.m_nStartFrame = GlobalBattleCtrl:GetCurCommandFrame()
	self.m_nSkillId = skillCommand.m_nSkillId
	self.m_tSkillPos = skillCommand.m_tSkillPos
	self.m_nTargetId = skillCommand.m_nTargetId
	self.m_tActionList = {}
	self.m_bFinish = false
	self:_ParseConfig() 

	--创建帧主动刷新一次 检测开始
	self:Update()
end


--@brief 移除
function SkillActionParse:Destroy()
	CSLog("SkillActionParse:Destroy")
end

--@brief 刷新
function SkillActionParse:Update()
	if not self.m_bFinish and self.m_tActionList then
		local commandFrame = GlobalBattleCtrl:GetCurCommandFrame()
		local isComplete = true
		for frame,actionList in pairs(self.m_tActionList) do
			for i = #actionList,1,-1 do
				action = actionList[i]
				if not action:IsFinish() and not action:IsStart() then
					isComplete = false
					action:CheckStart()
				end

				if action:IsStart() then
					isComplete = false
					action:Update()
				end

				if action:IsFinish() then
					action:Destroy()
					table.remove(actionList,i)
					i = i - 1
				end
			end
			if #actionList == 0 then
				self.m_tActionList[frame] = nil
			end
		end
		if isComplete then
			self.m_bFinish = true
		end
	end
end

--@brief 结束
function SkillActionParse:Done()
	self.m_bFinish = true
end

--@brief 结束标记
function SkillActionParse:IsFinish()
	return self.m_bFinish
end

--@brief 技能id
function SkillActionParse:GetSkillId()
	return self.m_nSkillId
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


--@brief 解析配置
function SkillActionParse:_ParseConfig()
	local config = {
	[0] = {
			{actionType = SkillActionType.Play,param = {"attack1"}},
			{actionType = SkillActionType.Face,param = {SkillFaceType.UpSkill}},
		},
	[1] = {
			{actionType = SkillActionType.Collider,param = {0.5,0,SkillLayerType.Hero,0,1,SkillTargetType.Self,30}},
		}
	}

	if GameConfig.IsSkillDebugScene then
		config = self:GetTestConfig()
	end

	for frameCFG,listCFG in pairs(config) do
		local frame = self.m_nStartFrame + frameCFG
		for i,actionCFG in pairs(listCFG) do
			local param = actionCFG.param
			local action = nil
			if actionCFG.actionType == SkillActionType.Face then
				action = self:_GetRotateAction(frame,param)

			elseif actionCFG.actionType == SkillActionType.Play then
				action = self:_GetPlayAction(frame,param)

			elseif actionCFG.actionType == SkillActionType.Collider then
				action = self:_GetColliderAction(frame,param)

			elseif actionCFG.actionType == SkillActionType.Sound then

			end

			if action then
				if not self.m_tActionList[i] then
					self.m_tActionList[i] = {}
				end
				table.insert(self.m_tActionList[i],action)
			end
		end
		
	end
end

--@brief 获得基础Action
function SkillActionParse:_GetRotateAction(frame,param)
	-- CSLog("SkillActionParse:_GetRotateAction",frame,SerializeTable(param))
	--[1]朝向
	local data = SkillActionFaceData:Create(self.m_tOwner,frame,self.m_tSkillPos,self.m_nTargetId,param)
	local action = SkillActionFace:Create(self,data)
	return action
end

--@brief 获得播放Action
function SkillActionParse:_GetPlayAction(frame,param)
	-- CSLog("SkillActionParse:_GetPlayAction",frame,SerializeTable(param))
	--[1]动作名
	local data = SkillActionPlayData:Create(self.m_tOwner,frame,self.m_tSkillPos,self.m_nTargetId,param)
	local action = SkillActionPlay:Create(self,data)
	return action
end

--@brief 获得碰撞Action
function SkillActionParse:_GetColliderAction(frame,param)
	--CSLog("SkillActionParse:_GetPlayAction",frame,SerializeTable(param))
	local data = SkillActionColliderData:Create(self.m_tOwner,frame,self.m_tSkillPos,self.m_nTargetId,param)
	local action = SkillActionCollider:Create(self,data)
	return action
end



--@brief  测试 
function SkillActionParse:GetTestConfig( )
	package.loaded["ALuaConfig.SkillActionConfigTmp"] = nil
	require 'ALuaConfig.SkillActionConfigTmp'
	return SkillActionConfig.id_template
end