--BattleCommandProtocol.txt
--@breif 战斗协议
--@data 2018/03/13

--@brief c#引用
local CSLog = CS.GameTool.Log
local CSVector3 = CS.CS.UnityEngine.Vector3


BattleCommandProtocol = {
	m_tCommandList = nil,		--操作集合

	m_tstClientCommandList = nil,		--客户端模拟驱动帧(技能测试使用)
}

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 初始化
function BattleCommandProtocol:Init()
	CSLog("BattleCommandProtocol:Init")

	--@brief 监听协议
	if not GameConfig.IsSingleScene then
		BattleCommandProtocol:_RegAll()
	end
end

--@brief 移除
function BattleCommandProtocol:Destroy()
	CSLog("BattleCommandProtocol:Destroy")
	--@brief 监听协议
	if not GameConfig.IsSingleScene then
		BattleCommandProtocol:_UnRegAll()
	end
end


--@brief 接收驱动帧
function BattleCommandProtocol:ParseCommand(commands,endId)
	--数据存储
	if commands then
		for frame,commandList in pairs(commands) do
			 GlobalBattleCtrl:AddCommandList(frame,commandList)
		end
	end
	--驱动逻辑帧往前
	 GlobalBattleCtrl:SetNextFrame(endId)
end

--@brief 发送命令
function BattleCommandProtocol:SendCommand(command)
	if GlobalBattleCtrl:GetOwnerChara():IsDead() then
		return
	end
	local commandType = command.m_nType

	--技能测试
	if GameConfig.IsSingleScene then
		BattleCommandProtocol:__TsClientInputCommand(command)
		return
	end

	--发送给服务器

	if commandType == BattleCommandType.Move then
		BattleCommandProtocol:SendMoveFrameMsg(command)
	elseif commandType == BattleCommandType.Skill then
		BattleCommandProtocol:SendSkillFrameMsg(command)
	elseif commandType == BattleCommandType.Collider then
		BattleCommandProtocol:SendColliderFrameMsg(command)
	end
end

--@brief 移动
function BattleCommandProtocol:SendMoveCommand(dir)
	local pos = GlobalBattleCtrl:GetOwnerChara():GetPos()
	local command = BattleMoveCommand:Create(GlobalBattleCtrl:GetOwnerId(),dir,pos)
	BattleCommandProtocol:SendCommand(command)
end

--@brief 使用技能
--@param skillId 技能id
--@param pos 技能目标点
function BattleCommandProtocol:SendSkillCommand(skillId,pos,targetId)
	local command = BattleSkillCommand:Create(GlobalBattleCtrl:GetOwnerId(),skillId,pos,targetId)
	BattleCommandProtocol:SendCommand(command)
end

--@brief 
--@param skillId 技能id
--@param colliderPos 碰撞框中心
--@param targetList 目标队列
function BattleCommandProtocol:SendColliderCommand(skillId,colliderPos,targetList)
	local command = BattleColliderCommand:Create(GlobalBattleCtrl:GetOwnerId(),skillId,colliderPos,targetList)
	BattleCommandProtocol:SendCommand(command)
end

--@brief发送血量修改（临时）
function BattleCommandProtocol:SendHpChange(value)
	local frame = GlobalBattleCtrl:GetCurCommandFrame()

	local package = Package:Create(PROTOCOL.MAP_ROLE_FRAME)
	package.data = {}
	package.data.frame_id = frame
	package.data.type = 6
	--发送服务器坐标转换
	package.data.int_data = {value}
	package.data.str_data = ""

	NetWorkManager:SendNetMsg(package)
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 监听协议
function BattleCommandProtocol:_RegAll()
	ZTProtocol:Register(PROTOCOL.SURVIVE_MATCH, BattleCommandProtocol._OnSurvieMatch, BattleCommandProtocol)
	ZTProtocol:Register(PROTOCOL.SURVIVE_FIGHT, BattleCommandProtocol._OnSurvieFight, BattleCommandProtocol)
	--地图相关协议
	ZTProtocol:Register(PROTOCOL.MAP_SIGHT,BattleCommandProtocol._OnMapSight,BattleCommandProtocol)
	ZTProtocol:Register(PROTOCOL.MAP_FRAME,BattleCommandProtocol._OnMapFrame,BattleCommandProtocol)
end

--@brief 移除协议监听
function BattleCommandProtocol:_UnRegAll()
	CSLog("BattleCommandProtocol:_UnRegAll")
	ZTProtocol:Unregister(PROTOCOL.SURVIVE_MATCH)
	ZTProtocol:Unregister(PROTOCOL.SURVIVE_FIGHT)

	--地图相关协议
	ZTProtocol:Unregister(PROTOCOL.MAP_SIGHT)
	ZTProtocol:Unregister(PROTOCOL.MAP_FRAME)
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************协议发送***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--@brief 发送匹配
function BattleCommandProtocol:SendMath()
	NetWorkManager:SendNetMsg(Package:Create(PROTOCOL.SURVIVE_MATCH))
end

--@brief 组织驱动帧内容发送
function BattleCommandProtocol:SendCommandFrameMsg(data)
	local package = Package:Create(PROTOCOL.MAP_ROLE_FRAME)
	package.data = data
	NetWorkManager:SendNetMsg(package)
	--CSLog("BattleCommandProtocol:SendCommandFrameMsg",SerializeTable(data))
end

--@brief 发送移动驱动帧消息
function BattleCommandProtocol:SendMoveFrameMsg(command)
	local frame = GlobalBattleCtrl:GetCurCommandFrame() + BattleDefine.CommandStep + 1
	
	local data = {}
	data.frame_id = frame
	data.type = command.m_nType
	--发送服务器坐标转换
	local pos = BattleDefine:GetServerPos(command.m_pos.x,command.m_pos.y,command.m_pos.z)
	data.int_data = {command.m_nDir,pos.x,pos.y,pos.z}

	data.str_data = ""
	BattleCommandProtocol:SendCommandFrameMsg(data)
end

--@brief 发送技能驱动帧消息
function BattleCommandProtocol:SendSkillFrameMsg(command)
	local frame = GlobalBattleCtrl:GetCurCommandFrame() + BattleDefine.CommandStep + 1
	
	local data = {}
	data.frame_id = frame
	data.type = command.m_nType
	--技能id，技能操作x， y， z,指向目标id
	local pos = BattleDefine:GetServerPos(command.m_tSkillPos.x,command.m_tSkillPos.y,command.m_tSkillPos.z)
	
	data.int_data = {command.m_nSkillId,pos.x,pos.y,pos.z, command.m_nTargetId}
	data.str_data = ""

	BattleCommandProtocol:SendCommandFrameMsg(data)
end

--@brief 发送碰撞驱动帧消息
function BattleCommandProtocol:SendColliderFrameMsg(command)
	local frame =GlobalBattleCtrl:GetCurCommandFrame()

	local data = {}
	data.frame_id = frame
	data.type = command.m_nType

	--技能id，碰撞x， y， z， 碰撞队列长度，碰撞队列id
	local pos = BattleDefine:GetServerPos(command.m_nColliderPos.x,command.m_nColliderPos.y,command.m_nColliderPos.z)
	local intData = {command.m_nSkillId,pos.x,pos.y,pos.z,#command.m_tTargetList}
	for i = 1,#command.m_tTargetList do
		table.insert(intData,command.m_tTargetList[i])
	end

	data.int_data = intData
	data.str_data = ""

	BattleCommandProtocol:SendCommandFrameMsg(data)
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 协议接收begin
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--@brief 匹配返回
function BattleCommandProtocol:_OnSurvieMatch(data)
	CSLog("BattleCommandProtocol:_OnSurvieMatch",data.code)
end

--@brief 游戏开始
function BattleCommandProtocol:_OnSurvieFight(data)
	
end

--@brief 玩家信息
function BattleCommandProtocol:_OnMapSight(data)
	CSLog("BattleCommandProtocol:_OnMapSight",data.role_id,data.frame_id,SerializeTable(data.roles_enter))
	if data.roles_enter then
		local list = {}
		for i,v in pairs(data.roles_enter) do
			local data = {}
			data.battleId = v.id
			data.camp = v.team
			--data.hp = v.hp
			--data.career = v.jop
			data.pos = BattleDefine:GetClientPos(v.x,v.y,v.z)
			data.attritList = BattleCommandProtocol:_GetAttributeList(v.base_attr)

			table.insert(data.attritList, {AttributeType.Hp, v.hp})
			table.insert(data.attritList, {AttributeType.Mp, v.mp})

			list[data.battleId] = data
		end

		GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.START_GAME,list,data.role_id)
	end
	--重置驱动帧管理器
	GlobalBattleCtrl:ResetCommandList(data.frame_id,math.floor(data.frame_id / BattleDefine.CommandStep)* BattleDefine.CommandStep)

	MapCircleManager:SetMapCircleCommand(data.circles)
end

--@brief 接收驱动帧
function BattleCommandProtocol:_OnMapFrame(sightData)
	--data.start_id
	--data.end_id
	local commands = nil
	--CSLog("BattleCommandProtocol:_OnMapFrame=====>>>",sightData.start_id,sightData.end_id)
	if #sightData.data > 0 then
		--CSLog("BattleCommandProtocol:_OnMapFrame",SerializeTable(sightData))
		-- CSLog("BattleCommandProtocol:_OnMapFrame",GlobalBattleCtrl:GetCurCommandFrame())
		commands = {}
		for i,v in pairs(sightData.data) do
			if not commands[v.frame_id] then
				commands[v.frame_id] = {}
			end
			
			local command = nil
			if v.type == BattleCommandType.Move then
				local battleId,dir,x,y,z = v.role_id,v.int_data[1],v.int_data[2],v.int_data[3],v.int_data[4]
				command = BattleMoveCommand:CreateServer(battleId,dir,x,y,z)
				
			elseif v.type == BattleCommandType.Skill then
				local battleId,skillId,x,y,z,targetId = v.role_id,v.int_data[1],v.int_data[2],v.int_data[3],v.int_data[4],v.int_data[5]
				command = BattleSkillCommand:CreateServer(battleId,skillId,x,y,z,targetId)

			elseif v.type == BattleCommandType.Collider then
				local battleId,skillId,x,y,z = v.role_id,v.int_data[1],v.int_data[2],v.int_data[3],v.int_data[4]
				local list = {}
				for i = 1,v.int_data[5] do
					table.insert(list,v.int_data[5+i])
				end
				command = BattleColliderCommand:CreateServer(battleId,skillId,x,y,z,list)
			
			elseif v.type == BattleCommandType.EffectSync then
				command = BattleCommandProtocol:_GetEffectSyncCommand(v.role_id,v.int_data)
			end


			if command then
				table.insert(commands[v.frame_id],command)
			end
		end
	end
	
	BattleCommandProtocol:ParseCommand(commands,sightData.end_id)
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief协议接收end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 获得属性列表
function BattleCommandProtocol:_GetAttributeList(data)
	local list = {}
	table.insert(list, {AttributeType.HpMax, data.hp_max})
	table.insert(list, {AttributeType.AttackMin, data.attack_min})
	table.insert(list, {AttributeType.AttackMax, data.attack_max})
	table.insert(list, {AttributeType.Defense, data.defense})
	table.insert(list, {AttributeType.AttackSpeed, data.attack_speed})

	table.insert(list, {AttributeType.HpRec, data.hp_rec})
	table.insert(list, {AttributeType.MpMax, data.mp_max})
	table.insert(list, {AttributeType.Luck, data.lucky})
	table.insert(list, {AttributeType.Curse, data.curse})
	table.insert(list, {AttributeType.MoveSpeed, data.speed})

	table.insert(list, {AttributeType.AttackAcc, data.attack_acc})
	table.insert(list, {AttributeType.HurtDec, data.hurt_dec})
	table.insert(list, {AttributeType.CDAcc, data.cd_acc})
	

	table.insert(list, {AttributeType.MpRec, data.mp_rec})
	return list
end

--@brief 获得同步命令
function BattleCommandProtocol:_GetEffectSyncCommand(role_id,int_data)

	local syncType = int_data[1]
	table.remove(int_data,1)
	--CSLog("BattleCommandProtocol:_GetEffectSyncComman",syncType)
	if syncType == EffectSyncType.Attribute then
		--同步属性
		return BattleCommandProtocol:_GetAttributeCommand(role_id,int_data)

	elseif syncType == EffectSyncType.Dead then
		--同步死亡
		return BattleEffectSyncCommand:CreateDead(role_id)

	end
	
end

--@brief 属性同步
function BattleCommandProtocol:_GetAttributeCommand(role_id,int_data)
	local list = {}
	local battleId = role_id
	for i =1,#int_data,2 do
		local attriType,value = int_data[i],int_data[i + 1]
		table.insert(list,{attriType,value})
	end
	local command = BattleEffectSyncCommand:CreateAttribute(battleId,list)

	return command
end


--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************测试代码***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--@brife 客户端模拟驱动帧发送(技能测试使用)
function BattleCommandProtocol:__TsClientSendDriveCommand()
	--CSLog("BattleCommandProtocol:__TsClientSendDriveCommand")
	--发送驱动帧
	if not BattleCommandProtocol.m_tstClientCommandList then
		BattleCommandProtocol:ParseCommand({})
	else
		BattleCommandProtocol:ParseCommand(BattleCommandProtocol.m_tstClientCommandList)
	end
	BattleCommandProtocol.m_tstClientCommandList = {}
end

--@brife 客户端模拟塞入驱动帧
function BattleCommandProtocol:__TsClientInputCommand(command)
	--CSLog("BattleCommandProtocol:__TsClientInputCommand",SerializeTable(command))
	local frame = GlobalBattleCtrl:GetCurCommandFrame() + BattleDefine.CommandStep + 1
	if not BattleCommandProtocol.m_tstClientCommandList then
		BattleCommandProtocol.m_tstClientCommandList = {}
	end
	if not BattleCommandProtocol.m_tstClientCommandList[frame] then
		BattleCommandProtocol.m_tstClientCommandList[frame] = {}
	end
	table.insert( BattleCommandProtocol.m_tstClientCommandList[frame], command )
end

