--BattleModel.txt
--@breif luaæˆ˜æ–—æ¨¡å—
--@data 2018/3/5
BattleModel = {
	m_tPanelList = nil,
	m_parent = nil,
}

BATTLE_UI_TYPE = {
	MAP_SCROLL = 1,	--å¤§åœ°å›¾
	MAP_RADAR = 2,	--é›·è¾¾å›¾
	QUICKBAG=3,
}

--@brief c#å¼•ç”¨
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSVector3 = CS.UnityEngine.Vector3
local CSLog = GCSLog

----------------------------------------------------------------------------------------------------------------------------------
--*******************************************************Public Begin***************************************************************
----------------------------------------------------------------------------------------------------------------------------------
--@brief åˆ›å»º
function BattleModel:Create(parent)
	local obj = {}
	setmetatable( obj, { __index = BattleModel })
	obj:Init(parent)
	return obj
end

--@brief åˆå§‹åŒ–
function BattleModel:Init(parent)
	self.m_parent = parent
	self.m_tPanelList = {}

	self:_AddEvent()
end

--@breif æ›´æ–°é¢æ¿
function BattleModel:Update()
	for i,panel in pairs(self.m_tPanelList) do
		panel:Update(deltaTime)
	end
end

--@brief å‘½ä»¤å¸§æ›´æ–°
function BattleModel:UpdateCommand()
	self:_UpdateCommandPanel()
end


--@brief é”€æ¯
function BattleModel:Destroy()
	print("BattleModel:Destroy")
	if self.m_tPanelList then
		for i,panel in pairs(self.m_tPanelList) do
			panel:Destroy()
		end
		self.m_tPanelList = nil
	end
	self:_RemoveEvent()
end

function BattleModel:_AddEvent()
	GBattleEvent:GetDispatcher():AddEvent(BATTLE_EVENT.SHOW_MAP_QUICKBAG_PANEL,self.OnShowQuickBagPanel,self)
end

--@brifef 移除事件
function BattleModel:_RemoveEvent()
	GBattleEvent:GetDispatcher():RemoveEvent(BATTLE_EVENT.SHOW_MAP_QUICKBAG_PANEL,self.OnShowQuickBagPanel)
end


function BattleModel:OnShowQuickBagPanel(data)
	if self.m_tPanelList[BATTLE_UI_TYPE.MAP_SCROLL] then
		self.m_tPanelList[BATTLE_UI_TYPE.MAP_SCROLL]:ShowQuickPanel(data)
end

--@breif æ˜¾ç¤ºé¢æ¿
function BattleModel:ShowPanel( panelType)
	local panel = nil
	if self.m_tPanelList[panelType] then
		panel = self.m_tPanelList[panelType]
	else
		if panelType == BATTLE_UI_TYPE.MAP_SCROLL then
			panel = MapScrollPanel:Create(self.m_parent,self)
		elseif panelType == BATTLE_UI_TYPE.MAP_RADAR then
			panel = MapRadarPanel:Create(self.m_parent,self)
		elseif panelType== BATTLE_UI_TYPE.QUICKBAG then
			panel=QuickBagPanel:Create(self.m_parent,self)
		end
		
		self.m_tPanelList[panelType] = panel
	end

	if panel then
		panel:Show()
	end
end

--@breif éšè—é¢æ¿
function BattleModel:HidePanel(panelType)
	local panel = nil
	if self.m_tPanelList[panelType] then
		panel = self.m_tPanelList[panelType]
	else
		GCSLog("BattleModel:HidePanel","found out",panelType)
	end

	if panel then
		panel:Hide()
	end
end

----------------------------------------------------------------------------------------------------------------------------------
--*******************************************************Public End***************************************************************
----------------------------------------------------------------------------------------------------------------------------------
