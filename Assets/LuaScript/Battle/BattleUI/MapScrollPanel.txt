--MapScrollPanel.txt
--@breif lua入口
--@data 2018/3/5

--@brief c#引用
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSRectTransform = CS.UnityEngine.RectTransform
local CSVector3 = CS.UnityEngine.Vector3
local CSVector2 = CS.UnityEngine.Vector2
local CSColor = CS.UnityEngine.Color
local CSQuaternion = CS.UnityEngine.Quaternion

MapScrollPanel = {
	m_scaleValue = 1,
	m_showCircle = false,
	
	m_ScrollView = nil,
	m_ztCircleCur = nil,
	m_ztCircleDest = nil,

	m_playerList = nil,
	m_playerItemParent = nil,
	m_prePlayerItem = nil,
}

setmetatable( MapScrollPanel, { __index = UIBasePanel})
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 面板数据初始化
function MapScrollPanel:onInitPanelData()
	self.m_panelName = "MapScrollPanel"
end

--@brief 面板被创建
function MapScrollPanel:onCreatePanel()	
	--@brief 初始化登录界面UI控件
	PanelWidget:GetZTButton(self.m_transform,"ViewPort/btnClose",function() self:Hide() end)

	PanelWidget:GetZTSlider(self.m_transform,"ViewPort/ZTSlider",function(value) self:_onValueChanged(value) end)
	self.m_ScrollView = PanelWidget:GetScrollView(self.m_transform,"ViewPort/Scroll View")

	--毒圈相关
	self.m_ztCircleCur = PanelWidget:GetZTCircle(self.m_ScrollView.content,"Circles/ZTCircleCur")
	self.m_ztCircleCur:Init(50)
	self.m_ztCircleCur:SetColor(CSColor.green)
	self.m_ztCircleDest = PanelWidget:GetZTCircle(self.m_ScrollView.content,"Circles/ZTCircleDest")
	self.m_ztCircleDest:Init(50)
	self.m_ztCircleDest:SetColor(CSColor.red)

	--玩家，队友
	self.m_playerItemParent = PanelWidget:GetChild(self.m_ScrollView.content,"PlayerList")
	self.m_prePlayerItem = PanelWidget:GetChild(self.m_playerItemParent,"PrePlayerItem")

end

--@brief 面板初始化
function MapScrollPanel:onInitPanel()
	self:_UpdatePlayer()
end

--@brief 面板每帧更新
function MapScrollPanel:onUpdatePanel(deltaTime)
		self:_UpdateCircle(false)
	self:_UpdatePlayer()
end

--@brief 销毁登录面板
function MapScrollPanel:onDestroy()
end

--@brief 添加事件监听
function MapScrollPanel:_AddEvents()
	GBattleEvent:GetDispatcher():AddEvent(BATTLE_EVENT.START_GAME,self._OnStartGame,self)

end

--@brief 移除事件监听
function MapScrollPanel:_RemoveEvents()
	GBattleEvent:GetDispatcher():RemoveEvent(BATTLE_EVENT.START_GAME,self._OnStartGame)

end

--@brief 注册网络门户
function MapScrollPanel:_RegNetFacade()
end

--@brief 注销网络门户
function MapScrollPanel:_UnRegNetFacade()
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 在地图上创建一个玩家标识
function MapScrollPanel:_CreatePlayer( playerId )
	local playTransform = CSTransform.Instantiate(self.m_prePlayerItem,self.m_playerItemParent)
	local playRectTransform = playTransform:GetComponent("RectTransform")
	playTransform.name = playerId
	local ztImg = playTransform:GetComponent("ZTImage")
	if ztImg then
		if playerId == GlobalBattleCtrl:GetOwnerId() then
			ztImg.color = CSColor.green;
		else
			ztImg.color = CSColor.yellow;
		end
	end

	playTransform.gameObject:SetActive(true)
	return playRectTransform
end

--@brief 刷新地图上，玩家信息（角度，坐标）
function MapScrollPanel:_UpdatePlayer()
	if not self.m_playerList then self.m_playerList = {} end
	local team = GlobalBattleCtrl:GetOwnerTeamChara()
	for k,v in pairs(team) do
		local playerId = v:GetBattleId()
		self.m_playerList[playerId] = self.m_playerList[playerId] or self:_CreatePlayer(playerId)
		local pos = v:GetPos()
		local tmpPos = CSVector2(pos.x,pos.z)
		self.m_playerList[playerId].anchoredPosition = tmpPos * 512/2048 * self.m_scaleValue
		self.m_playerList[playerId].localEulerAngles = v:GetFaceAngle() * CSVector3.forward
	end
end

--@brief 游戏开始时
function MapScrollPanel:_OnStartGame(  )
	self:_ClearPlayer()
end

--@brief 清除地图上的玩家
function MapScrollPanel:_ClearPlayer()
	if not self.m_playerList then return end
	for k,v in pairs(self.m_playerList) do
		CSGameObject.Destroy(v.gameObject)
	end
end

--@brief 地图缩放时触发
function MapScrollPanel:_onValueChanged(value)
	self.m_scaleValue = value
	self.m_ScrollView.content.sizeDelta = CSVector2.one * self.m_scaleValue * 512
	if self.m_showCircle then 
		self:_UpdateCircle( true )
	end
end

--@brief 刷新毒圈
function MapScrollPanel:_UpdateCircle(force)
	if not MapCircleManager.m_isWait or force then
		self:_SetCircle(self.m_ztCircleCur,MapCircleManager.m_scrCircle)
		self:_SetCircle(self.m_ztCircleDest,MapCircleManager.m_destCircle)
		self:Show_Circle()
	end
end

--@brief 显示毒圈
function MapScrollPanel:Show_Circle()
	self.m_showCircle = true
	self.m_ztCircleCur:Show()	
	self.m_ztCircleDest:Show()
end

--@brief 隐藏毒圈
function MapScrollPanel:Hide_Circle()
	self.m_showCircle = false
	self.m_ztCircleCur:Hide()	
	self.m_ztCircleDest:Hide()
end

--@brief 设置毒圈参数
function MapScrollPanel:_SetCircle(circle, circleInfo)
	local _mapProportion = 512/2048 * self.m_scaleValue
	circle:SetRadius(circleInfo.radius * _mapProportion)
	circle.rectTransform.anchoredPosition = circleInfo.pos  * _mapProportion
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
