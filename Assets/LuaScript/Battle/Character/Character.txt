--Character.txt
--@breif lua模板
--@data 2018/03/09

--@brief c#引用
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSVector3 = CS.UnityEngine.Vector3
local CSLog = CS.GameTool.Log

--人物状态机
CharacterState = {
	Normal = 1,			--常规状态
	Die = 2,			--死亡
	Charge = 4,			--充能
	Skill = 8,			--施法中
	KnockState = 16,		--击倒 击飞 击退
	Controller = 32,		--受控
	MoveLocked = 64,		--移动锁定
	FaceLocked = 128,		--方向锁定
	AnimaLocked = 256,		--动作锁定
}

Character = {
	m_nBattleId = nil,	--战斗对象id
	m_animData = nil,	--形象数据
	m_animator = nil,	--形象动画
	m_bInCamera = nil,	--进入镜头

	m_nMoveDir = nil,	--移动方向
	m_charaPos = nil,		--当前位置
	m_rotatePos = nil,		--朝向点
	m_nGlassId = nil,		--草丛id
	m_nCampId = nil,		--camp
	
	m_nState = nil,		--玩家状态
	--频繁访问状态（update等）用bool值记录
	m_bIsDead = nil,	--玩家死亡
	m_bMoveLocked = nil,	--锁定移动
	m_bAnimLocked = nil,	--动作播放锁定
	

	m_ztCollider = nil,		--碰撞框

	m_attriSystem = nil,	--属性系统
	m_buffSystem = nil,		--buff系统

	m_knockAction = nil, --击飞 击倒 击倒等控制器{dir|方向，timeMax|总时间，timeNum|计数}
}

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
function Character:Create(battleData,container)
	local obj = {}
	setmetatable( obj, { __index = Character })
	obj:Init(battleData,container)
	return obj
end

--@brief 初始化
function Character:Init(battleData,container)
	-- CSLog("Character:Init",battleData.pos)
	self.m_nBattleId = battleData.battleId or 1
	self.m_animData = BattleAnimatorData:Create(AnimatorType.Hero,battleData.careerType)
	self.m_animator = Animator:Create(self.m_animData,container)
	self.m_bInCamera = false

	self.m_charaPos = CSVector3.zero
	self.m_rotatePos = CSVector3.forward

	self.m_nMoveDir = BattleDir.None

	self.m_nGlassId = -1
	self.m_nCampId = battleData.camp
	

	self.m_nState = 0
	self.m_bIsDead = false
	self.m_ztCollider =  ZTCollider:Create(0,BattleDefine.PlayerHeight,0,BattleDefine.PlayerRadius,BattleDefine.PlayerHeight)

	self:InitAttributeSystem(battleData)
	self:InitBuffSystem()

	self:UpdatePos(battleData.pos)
end

--@brief 初始化属性系统
function Character:InitAttributeSystem(battleData)
	self.m_attriSystem = AttributeSystem:Create()
	self:SetAttributeByList(battleData.attriList)
end

--@brief 初始化buff系统
function Character:InitBuffSystem()
	self.m_buffSystem = BuffSystem:Create(self)
end

--@brief 移除
function Character:Destroy()
	CSLog("Character:Destroy")
	--清理形象
	if self.m_animator then
		self.m_animator:Destroy()
		self.m_animator = nil
	end
	--清理形象数据
	if self.m_animData then
		self.m_animData:Destroy()
		self.m_animData = nil
	end
end

--@brief 刷新数据
function Character:SetData(data)
	self:UpdatePos(data.pos)
	self:SetAttributeByList(data.attritList)
end

--@brief 刷新动画
function Character:Update(dt)
	if not self:IsDead() and self:IsInCamera() then
		self.m_animData:UpdateDelayView(dt)
	end
end

--@brief 刷新逻辑帧
function Character:UpdateCommand()
	self:_UpdateMoveCommand()
end

--@brief 获得战斗id
function Character:GetBattleId()
	return self.m_nBattleId
end

--@brief 设置方向
function Character:SetDirection(dir)
	-- CS.GameTool.LogError("Character:SetDirection",self.m_nMoveDir,dir)
	if self.m_nMoveDir ~= dir then
		--切换待机 和其他状态 播放对应动作
		self.m_nMoveDir = dir
		
		if self.m_nMoveDir ~= BattleDir.None then
			self:UpdateRotate(BattleDirDefine:GetDirPos(self.m_nMoveDir))
			self:Play(AnimatorName.Move)
		else
			self:AnimaMoveToPos()
		end
	end

end
--@brief 动画补间移动
function Character:AnimaMoveToPos()
	self.m_animData:MoveToPos(self.m_nMoveDir,self.m_charaPos)
end

--@brief 调整朝向
-- function Character:UpdateViewByDirection()
-- 	--切换角度(移动锁定 而且 不包含调整角度技能)
-- 	if not self:IsMoveActionChangeRotate() then
-- 		return
-- 	end
-- 	if self:IsNormalState() then
-- 		if self.m_nMoveDir == BattleDir.None then
-- 			self:Play(AnimatorName.Idle)
-- 		else
-- 			self:Play(AnimatorName.Move)
-- 		end
-- 	end

-- 	if self.m_nMoveDir ~= BattleDir.None then
-- 		self:UpdateRotate(BattleDirDefine:GetDirPos(self.m_nMoveDir))
-- 	end
-- end

--@brief 获取朝向
function Character:GetFaceDir()
	return self.m_rotatePos.normalized
end

--@brief 获取面向角度
function Character:GetFaceAngle()
	local faceDir = self:GetFaceDir()
	local tmpVector2 = CSVector3.Angle(CSVector3.forward, faceDir)
	if faceDir.x <= 0 then 
		tmpVector2 = 360 - tmpVector2
	end
	return -tmpVector2
end


--@brief 获得位置
function Character:GetPos()
	return self.m_charaPos
end

--@brief 获得位置
function Character:SetPos(pos)
	self:UpdatePos(pos)
end

--@brief 获取动画位置
function Character:GetViewPos()
	return self.m_animData.m_tCurPos
end


--@brief 获取碰撞体
function Character:GetCollider()
	return self.m_ztCollider
end

--@brief 获取碰撞中心
function Character:GetColliderPos()
	return self.m_ztCollider.m_tPos
end

--@brief 是否主机
function Character:IsHost()
	return GlobalBattleCtrl:GetOwnerId() == self.m_nBattleId
end


--@brief 获取特效容器
function Character:GetEffectCon()
	if self.m_animator then
		return self.m_animator:GetEffectCon()
	end
	return nil
end

--@brief 获取技能容器
function Character:GetSkillCon()
	if self.m_animator then
		return self.m_animator:GetSkillCon()
	end
	return nil
end



--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 状态机begin
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 设置玩家状态
function Character:InState(state)
	self.m_nState = self.m_nState | state
	if state == CharacterState.MoveLocked then
		self.m_bMoveLocked = true
	elseif state == CharacterState.AnimaLocked then
		self.m_bAnimLocked = true
	end
end

--@brief 设置玩家状态
function Character:OutState(state)
	self.m_nState = self.m_nState & ~state
	if state == CharacterState.MoveLocked then
		self.m_bMoveLocked = false
	elseif state == CharacterState.AnimaLocked then
		self.m_bAnimLocked = false
	end
	self:CheckStateAnima()
	--CSLog("Character:OutState",self.m_nState)
end

-- --@brief 状态回切动作判断
function Character:CheckStateAnima()
	if self:IsNormalState() then
		if self.m_nMoveDir == BattleDir.None then
			self:Play(AnimatorName.Idle)
		else
			self:Play(AnimatorName.Move)
			self:UpdateRotate(BattleDirDefine:GetDirPos(self.m_nMoveDir))
		end
	end
end

--@brief 是否存在状态
function Character:IsInState(state)
	local result = self.m_nState & state
	return result == state
end

--@brief 是否是普通状态
function Character:IsNormalState()
	if self:IsDead() then
		return false
	end
	-- if self:IsInState(CharacterState.Skill) then
	-- 	return false
	-- end
	return true
end

--@brief 是否死亡
function Character:IsDead()
	return self.m_bIsDead
end

--@brief 设置死亡
function Character:SetDead(value)
	-- CSLog("Character:SetDead",value)
	if self.m_bIsDead == value then
		return
	end
	self.m_bIsDead = value
	if self.m_bIsDead then
		self:Play(AnimatorName.Die)
		self:InState(CharacterState.Die)
	else
		self:Play(AnimatorName.Idle)
		self:OutState(CharacterState.Die)
	end

	if self.m_bIsDead then
		GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.CHARACTER_DEAD,self:GetBattleId())
	end
end


--@brief 移动操作 调整朝向判断
function Character:IsMoveActionChangeRotate(value)
	if self.m_bMoveLocked and not self:IsInState(CharacterState.Skill)  then
		return false
	end

	return true
end


--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 状态机end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 属性计算相关begin
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


--@brief 根据类型获取属性
function Character:GetAttributeByType(type,isBase)
	local baseVal = self.m_attriSystem:GetAttributeByType(type)
	if isBase then
		return baseVal
	end

	local buffVal = self.m_buffSystem:GetAttributeByType(type)
	return baseVal + buffVal
end

--@brief 根据类型设置属性
function Character:SetAttributeByType(attriType,value)
	--发送血量变化事件
	if attriType ==  AttributeType.Hp and self:IsInCamera() then
		local curHp = self:GetHp()
		self.m_attriSystem:SetAttributeByType(attriType,value)
		--弹出伤害数字
		local hurtInfo = {hurtType = 1,pos = self:GetViewPos(),value = curHp - self:GetHp()}
		GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.ADD_CHARACTER_HURT_NUM,hurtInfo)
		--同步血槽
		GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.UPDATE_CHARACTER_HP,self.m_nBattleId)
		
		return
	end
	self.m_attriSystem:SetAttributeByType(attriType,value)
end

--@brief 设置属性
function Character:SetAttributeByList(list)
	for i = 1,#list do
		--CSLog("AttributeSystem:SetAttributeByList",list[i][1],list[i][2])
		self:SetAttributeByType(list[i][1],list[i][2])
	end

end

--@brief 修改血量
function Character:ChangeHp(value)
	local hp = self:GetHp()
	hp  = hp + value
	self:SetHp(hp)
end
--@brief 血量
function Character:GetHp(isBase)
	return self:GetAttributeByType(AttributeType.Hp,isBase)
end

--@brief 修改血量
function Character:SetHp(value)
	--上下限过滤
	if value < 0 then
		value = 0
	end
	local HpMax = self:GetHpMax()
	if value > HpMax then
		value = HpMax
	end

	if self:GetHp() == value then
		return
	end

	self:SetAttributeByType(AttributeType.Hp,value)

	

	if GameConfig.IsSingleScene then
		if self:GetHp() <= 0 and not self:IsDead() then
			self:SetDead(true)
			local loopTimer = LoopTimer:Create(function()
				self:SetHp(self:GetHpMax())
				self:SetDead(false)
			end)
			loopTimer:SetParam(5,1)
			TimerManager:AddTimer(loopTimer)
		end
	end
end

--@brief 最大血量
function Character:GetHpMax(isBase)
	return self:GetAttributeByType(AttributeType.HpMax,isBase)
end

--@brief 获得攻击力
function Character:GetAttackMin(isBase)
	return self:GetAttributeByType(AttributeType.AttackMin,isBase)
end

--@brief 获得攻击力
function Character:GetAttackMax(isBase)
	return self:GetAttributeByType(AttributeType.AttackMax,isBase)
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 属性计算相关end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 动作相关begin
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 添加伤害数字
function Character:AddHurtNum(value)
	if not GameConfig.IsSingleScene then
		return
	end
	self:ChangeHp(value)
	local hurtInfo = {hurtType = 1,pos = self:GetViewPos(),value = value}
	GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.ADD_CHARACTER_HURT_NUM,hurtInfo)
end


--@brief 播放动作
--@param 动作名
function Character:Play(name)
	if self.m_bAnimLocked then
		return
	end
	self.m_animData:Play(name)
end

--@brief 创建显示(进入镜头范围)
function Character:SetInCamera(inCamera)
	if self.m_bInCamera == inCamera then
		return
	end
	self.m_bInCamera = inCamera
	self.m_animData:SetInCamera(inCamera)
end

--@brief 是否在镜头范围内
function Character:IsInCamera()
	return self.m_bInCamera
end
--@brief 设置镜头跟随
function Character:SetCameraFollow(value)
	--CSLog("Character:SetCameraFollow",value)
	self.m_animData:SetCameraFollow(value)
end

--@brief 刷新位置
--@param vector3 pos
function Character:UpdatePos(pos,isMove)
	-- CS.GameTool.LogError("Character:UpdatePos",self.m_charaPos,pos,self.m_charaPos.Equals(pos))
	if not self.m_charaPos.Equals(pos) then
		--设置高度
		local height = BattleMapHeight:GetHight(pos)
		pos.y = height

		self.m_charaPos = pos
		self.m_ztCollider:SetPos(pos.x,pos.y + BattleDefine.PlayerHeight,pos.z)
		--调用动画刷新补间
		if not isMove then
			--动画刷新通知
			self.m_animData:UpdatePos(pos)
		end
		--CS.GameTool.LogError("Character:UpdatePos")
		-- if self.m_nBattleId == GlobalBattleCtrl:GetOwnerId() then
		-- 	GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.UPDATE_SCENE_POS,pos)
		-- end
		if self:IsInCamera() then
			GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.UPDATE_CHARACTRE_POS,self.m_nBattleId)
		end
	end
end

--@brief 更新角度
--@param vector3 dir
function Character:UpdateRotate(dir)
	if self:IsInState(CharacterState.FaceLocked) then
		return
	end

	if not self.m_rotatePos.Equals(dir) then
		self.m_rotatePos = dir
		self.m_animData:UpdateRotate(dir)
	end
end

--@brief 设置草丛id
function Character:SetGlassId(glassId)
	if self.m_nGlassId == glassId then
		return
	end
	self.m_nGlassId = glassId

	--通知更新草丛id
	GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.UPDATE_CHARACTER_GLASS,self.m_nBattleId)
end


--@brief 改变半透明（草丛状态显示）
function Character:ChangeTranslucence(transLv)
	self.m_animData:ChangeTranslucence(transLv)
end

--@brief 显示出生特效
function Character:ShowBornSpEffect()
	CS.AssetManager.LoadAsset(PathManager:GetSkillParticle("Born"),function (target,path)
		--CSLog("Character:ShowBornSpEffect:",target,path)
		if target then
			local go = CSGameObject.Instantiate(target,self:GetEffectCon())
		end
	end)
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 动作相关end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 刷新移动
function Character:_UpdateMoveCommand()
	if self:IsDead() or self.m_bMoveLocked then
		return
	end

	if self.m_nMoveDir ~= BattleDir.None then
		local list = BattleDirDefine:GetDirList(self.m_nMoveDir)
		local hitPos 
		local canMove = false
		for i =1,#list do
			hitPos = self.m_charaPos +  list[i] * (1/list[i].magnitude) * BattleDefine.PlayerSpeed
			local hitType,param = GlobalBattleCtrl:MapGetCurMapBlock(hitPos)
			if hitType == BlockType.None or hitType == BlockType.Hide then
				canMove = true
				-- CSLog("Änimator:_UpdateMoveCommand",hitPos,hitType)
                if hitType == BlockType.Hide then
                	self:SetGlassId(param)
                else
                	self:SetGlassId(-1)
                end
				break
			end
		end
		if canMove then
			-- CSLog("Character:_UpdateMoveCommand",self.m_nMoveDir,hitPos)
			self:UpdatePos(hitPos)
			self:AnimaMoveToPos()
		end
	end
end
