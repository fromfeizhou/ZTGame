--BattleAnimatorData.txt
--@breif 战斗动画数据
--@data 2018/04/11

--@brief c#引用
local CSLog = CS.GameTool.Log
local CSVector3 = CS.UnityEngine.Vector3

BattleAnimatorData = {
	m_bCameraFollow = nil,	--镜头跟随
	m_tCurPos = nil,		--当前位置
	m_tTargetPos = nil,		--目标位置

	m_nPlayCount = nil,		--动作计数
}
--@breif 继承AnimatorData
setmetatable( BattleAnimatorData, { __index = AnimatorData})
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
function BattleAnimatorData:Create(animaType,careerType)
	local obj = {}
	setmetatable( obj, { __index = BattleAnimatorData })
	obj:Init(animaType,careerType)
	return obj
end

-- --@brief 初始化
-- function BattleAnimatorData:Init(animaType,careerType)

-- 	AnimatorData.Init(self,animaType,careerType)
-- end

--@brief 设置镜头跟随
function BattleAnimatorData:SetCameraFollow(value)
	self.m_bCameraFollow = true
end

--@brief 刷新位置
--@param vector3 pos
function BattleAnimatorData:UpdatePos(pos)
	self:_SetPosDelay(pos)
end

--@brief 补间动画更新(界面刷新调用)
function BattleAnimatorData:UpdateDelayView(dt)
	self:_UpdatePosDelay(dt)
	self:_UpdatePlayDelay(dt)
end


--@brief 播放动作
--@param 动作名
function BattleAnimatorData:Play(name)
	if name == AnimatorName.Idle then
		self:_SetPlayDelay(name)
	else
		AnimatorData.Play(self,name)
	end
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 主角色调用
function BattleAnimatorData:_UpdateCameraPos()
	if self.m_bCameraFollow then
		GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.UPDATE_SCENE_POS,self.m_tCurPos)
	end
end

--@brief 刷新当前位置
function BattleAnimatorData:_UpdateCurPos(pos)
	AnimatorData.UpdatePos(self,pos)
	self.m_tCurPos = pos
	self:_UpdateCameraPos()
end

--@brief 初始化位置补间动画
function BattleAnimatorData:_SetPosDelay(pos)
	if not self.m_tCurPos then
		self:_UpdateCurPos(pos)
		return
	end
	self.m_tTargetPos = pos
	--大于10米 直接跑
	if CSVector3.Distance(self.m_tCurPos,self.m_tTargetPos) > 10 then
		self:_UpdateCurPos(pos)
	else
		self.m_bDelayPosSpeed = (self.m_tTargetPos - self.m_tCurPos) / BattleDefine.RendererDelay
		self.m_nDelayPosLenght = self.m_bDelayPosSpeed.magnitude
	end
end

--@brief 更新位置补间动画
function BattleAnimatorData:_UpdatePosDelay(dt)
	if not self.m_bDelayPosSpeed then
		return
	end
	local pos = nil
	if CSVector3.Distance(self.m_tCurPos,self.m_tTargetPos) > self.m_nDelayPosLenght then
		pos = self.m_tCurPos + self.m_bDelayPosSpeed
	else
		pos = self.m_tTargetPos
		self.m_bDelayPosSpeed = nil
	end
	self:_UpdateCurPos(pos)
end

--@brief 初始化董动作播放补间动画
function BattleAnimatorData:_SetPlayDelay(name)
	self.m_nPlayCount = BattleDefine.RendererDelay
	self.m_sAnimName = name
end

--@brief 更新位置补间动画
function BattleAnimatorData:_UpdatePlayDelay(dt)
	if not self.m_nPlayCount then
		return
	end
	self.m_nPlayCount = self.m_nPlayCount -1
	if self.m_nPlayCount <= 0 then
		self.m_nPlayCount = nil
		AnimatorData.Play(self,self.m_sAnimName)
	end
end