--BattleAnimatorData.txt
--@breif 战斗动画数据
--@data 2018/04/11

--@brief c#引用
local CSLog = CS.GameTool.Log
local CSVector3 = CS.UnityEngine.Vector3

BattleAnimatorData = {
	m_bCameraFollow = nil,	--镜头跟随
	m_tCurPos = nil,		--当前位置
	m_tTargetPos = nil,		--目标位置
	m_bMoveStop = nil,		--移动结束

	m_tCurRotate = nil,		--当前旋转
	m_tTargetRotate = nil,	--目标旋转
	m_tRotateSpeed = nil,	--旋转速度
	m_tRotateNum = nil,		--旋转计数

	m_nPlayCount = nil,		--动作计数
}
--@breif 继承AnimatorData
setmetatable( BattleAnimatorData, { __index = AnimatorData})
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
function BattleAnimatorData:Create(animaType,careerType)
	local obj = {}
	setmetatable( obj, { __index = BattleAnimatorData })
	obj:Init(animaType,careerType)
	return obj
end

-- --@brief 初始化
-- function BattleAnimatorData:Init(animaType,careerType)
-- 	AnimatorData.Init(self,animaType,careerType)
-- end

--@brief 设置镜头跟随
function BattleAnimatorData:SetCameraFollow(value)
	self.m_bCameraFollow = value
end

--@brief 刷新位置
--@param vector3 pos
function BattleAnimatorData:UpdatePos(pos)
	self.m_bMoveStop = true
	self:_SetPosDelay(pos)
end

--@brief 移动
function BattleAnimatorData:MoveToPos(moveDir,pos)
	if moveDir == BattleDir.None then
		self.m_bMoveStop = true
	else
		self.m_bMoveStop = false
	end
	self:_SetPosDelay(pos)
end


--@brief 播放动作
--@param 动作名
function BattleAnimatorData:Play(name)
	if self.m_sAnimaName == name then
		return
	end
	self.m_sAnimaName = name
	AnimatorData.Play(self,name)
end

--@brief 更新角度
--@param vector3 dir
function BattleAnimatorData:UpdateRotate(pos)
	self.m_tTargetRotate = pos
	self:_SetRotateDelay(pos)
	--AnimatorData.UpdateRotate(self,dir)
end

--@brief 补间动画更新(界面刷新调用)
function BattleAnimatorData:UpdateDelayView(dt)
	self:_UpdatePosDelay(dt)
	self:_UpdateRotateDelay(dt)
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 主角色调用
function BattleAnimatorData:_UpdateCameraPos()
	if self.m_bCameraFollow then
		GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.UPDATE_SCENE_POS,self.m_tCurPos)
	end
end

--@brief 刷新当前位置
function BattleAnimatorData:_UpdateCurPos(pos)
	-- CSLog("BattleAnimatorData:_UpdateCurPos",pos)
	AnimatorData.UpdatePos(self,pos)
	self.m_tCurPos = pos
	self:_UpdateCameraPos()
end

--@brief 初始化位置补间动画
function BattleAnimatorData:_SetPosDelay(pos)
	if not self.m_tCurPos then
		self:_UpdateCurPos(pos)
		return
	end

	self.m_tTargetPos = pos
	--大于10米 直接跑
	if CSVector3.Distance(self.m_tCurPos,self.m_tTargetPos) > 10 then
		self:_UpdateCurPos(pos)
	else
		self.m_bDelayPosSpeed = (self.m_tTargetPos - self.m_tCurPos) / BattleDefine.RendererDelay
		self.m_nDelayPosLenght = self.m_bDelayPosSpeed.magnitude
	end
end

--@brief 更新位置补间动画
function BattleAnimatorData:_UpdatePosDelay(dt)
	if not self.m_bDelayPosSpeed then
		return
	end
	local pos = self.m_tCurPos + self.m_bDelayPosSpeed
	local isEndPos = false

	if self.m_tTargetPos then
		local distance = CSVector3.Distance(self.m_tCurPos,self.m_tTargetPos)
		if distance <= self.m_nDelayPosLenght or distance < 0.01 then
			isEndPos = true
		end
	end
	--是否移动逻辑 区分插入位移补间
	if self.m_bMoveStop then	
		if isEndPos then
			pos = self.m_tTargetPos
			self.m_bDelayPosSpeed = nil
			
			--移动停止			
			if self.m_sAnimaName == AnimatorName.Move then
				self:Play(AnimatorName.Idle)
			end
		end
	else
		if isEndPos then
			--等待逻辑帧 移动继续
			if GlobalBattleCtrl:IsWaitCommandFrame() then
				self.m_bDelayPosSpeed = self.m_bDelayPosSpeed.normalized
				if self.m_bDelayPosSpeed.magnitude > 0 then
					self.m_bDelayPosSpeed = self.m_bDelayPosSpeed * (1/self.m_bDelayPosSpeed.magnitude) * BattleDefine.PlayerSpeed / BattleDefine.RendererDelay
					self.m_nDelayPosLenght = self.m_bDelayPosSpeed.magnitude

					self.m_tTargetPos = pos + self.m_bDelayPosSpeed * 2--加两帧补间
				else
					self.m_bDelayPosSpeed = nil
				end
			else
				self.m_bDelayPosSpeed = nil
			end
		end
		
	end
	self:_UpdateCurPos(pos)
end


--@brief 刷新当前位置
function BattleAnimatorData:_UpdateCurRotate(pos)
	-- CSLog("BattleAnimatorData:_UpdateCurRotate",pos)
	AnimatorData.UpdateRotate(self,pos)
	self.m_tCurRotate = pos
end

--@brief 设置旋转缓动
function BattleAnimatorData:_SetRotateDelay(pos)
	if not self.m_tCurRotate then
		self:_UpdateCurRotate(pos)
		return
	end
	local rotateNum = BattleDefine.RendererDelay * 4
	self.m_tRotateSpeed = (self.m_tTargetRotate - self.m_tCurRotate) / rotateNum
	self.m_tRotateNum = rotateNum
end

--@brief 刷新旋转
function BattleAnimatorData:_UpdateRotateDelay(dt)
	if not self.m_tRotateSpeed then
		return
	end
	if self.m_tRotateNum and self.m_tRotateNum > 0 then
		self.m_tRotateNum = self.m_tRotateNum - 1
		local pos = self.m_tCurRotate + self.m_tRotateSpeed 
		self:_UpdateCurRotate(pos)
	else
		self.m_tRotateSpeed = nil
	end
end