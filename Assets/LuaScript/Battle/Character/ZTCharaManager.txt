--ZTCharaManager.txt
--@breif 战斗对象管理
--@data 2018/03/07

--@brief c#引用
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSVector3 = CS.UnityEngine.Vector3
local CSLog = CS.GameTool.Log
local table = table


ZTCharaManager = {
	m_tCharaList = nil,
	m_tSortCharaList = nil,
	m_ztCharaContainer = nil,	--玩家容器
}

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
function ZTCharaManager:Create()
	local obj = {}
	setmetatable( obj, { __index = ZTCharaManager })
	obj:Init()
	return obj
end

--@brief 初始化
function ZTCharaManager:Init()
	
	--战斗对象容器
	self.m_ztCharaContainer = CSGameObject("CharaContainer").transform
	self.m_tCharaList = {}
	self.m_tSortCharaList = {}
	self.m_tCharaTeamList = nil
	--添加事件监听
	self:_AddEvent()

	--测试代码
	self:_InitSkillTest()
end

--@brief 移除
function ZTCharaManager:Destroy()
	CSLog("ZTCharaManager:Destroy")
	
	self:_RemoveEvent()

	self:ClearChara()
end

function ZTCharaManager:ClearChara( )
	if self.m_tCharaList then
		for i,v in pairs(self.m_tCharaList) do
			v:Destroy()
		end
		self.m_tCharaList = {}
	end

	--清理战斗对象容器
	if self.m_ztCharaContainer then
		CSGameObject.Destroy(self.m_ztCharaContainer.gameObject)
		self.m_ztCharaContainer = nil
	end

	self.m_tCharaTeamList = nil
end

--@brief 更新
function ZTCharaManager:Update(dt)
	for i = 1,#self.m_tSortCharaList do
		self.m_tSortCharaList[i]:Update(dt)
	end
end


--@brief 刷新镜头跟随对象
function ZTCharaManager:RushCameraFollow()
	for i = 1,#self.m_tSortCharaList do
		local chara = self.m_tSortCharaList[i]
		if chara:GetBattleId() == GlobalBattleCtrl:GetOwnerId() then
			chara:SetCameraFollow(true)
		else
			chara:SetCameraFollow(false)
		end

	end
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 帧同步操作 start
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 逻辑帧刷新
function ZTCharaManager:UpdateCommand()
	for i = 1,#self.m_tSortCharaList do
		self.m_tSortCharaList[i]:UpdateCommand()
	end
end

--@brief 逻辑帧刷新
--@param 使用者id
--@param 移动方向
function ZTCharaManager:AddMoveCommand(moveCommand)
	local battleId,dir = moveCommand.m_nBattleId,moveCommand.m_nDir
	local chara = self.m_tCharaList[battleId]
	-- CSLog("ZTCharaManager:AddMoveCommand",battleId,dir,chara)
	if chara then
		chara:SetDirection(dir)
	end
end

--@brief 逻辑帧刷新
--@param 效果同步
function ZTCharaManager:AddEffectCommand(command)
	local syncType  = command.m_nEffSyncType
	if syncType == EffectSyncType.Attribute then
		self:SyncAttribute(command)
	elseif syncType == EffectSyncType.Dead then
		self:SyncDead(command)
	end
end

--@brief 处理属性
function ZTCharaManager:SyncAttribute(command)
	local battleId,list = command.m_nBattleId,command.m_tAttriList
	local chara = self.m_tCharaList[battleId]
	-- CSLog("ZTCharaManager:SyncAttribute")
	if chara then
		chara:SetAttributeByList(list)
	end
end

--@brief 处理死亡
function ZTCharaManager:SyncDead(command)
	local battleId = command.m_nBattleId
	local chara = self.m_tCharaList[battleId]
	-- CSLog("ZTCharaManager:SyncDead",battleId)
	if chara then
		chara:SetDead(true)
	end
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
----@brief 帧同步操作 end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


--@brief 获得对象字典
function ZTCharaManager:GetCharacterDic()
	return self.m_tCharaList
end

--@brief 获得用户列表
function ZTCharaManager:GetCharacterList()
	return self.m_tSortCharaList
end

--@brief 获得队友
function ZTCharaManager:GetOwnerTeamChara()
	if  self.m_tCharaTeamList and #self.m_tCharaTeamList > 0 then
		return self.m_tCharaTeamList
	end

	local chara = GlobalBattleCtrl:GetOwnerChara()
	if chara then
		self.m_tCharaTeamList = {}
		for i= 1,#self.m_tSortCharaList do
			local tmpChara = self.m_tSortCharaList[i]
			if chara.m_nCampId == tmpChara.m_nCampId then
				table.insert(self.m_tCharaTeamList,tmpChara)
			end
		end

		return self.m_tCharaTeamList
	end
	return {}
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 添加事件监听
function ZTCharaManager:_AddEvent()
	GBattleEvent:GetDispatcher():AddEvent(BATTLE_EVENT.ADD_CHARACTER,self._OnAddCharacter,self)
	GBattleEvent:GetDispatcher():AddEvent(BATTLE_EVENT.REMOVE_CHARACTER,self._OnRemoveCharacter,self)
	GBattleEvent:GetDispatcher():AddEvent(BATTLE_EVENT.UPDATE_CHARACTER_GLASS,self._OnUpdateCharacterGlass,self)

	GBattleEvent:GetDispatcher():AddEvent(BATTLE_EVENT.START_GAME,self._OnStartGame,self)
	
end

--@brief 移除事件监听
function ZTCharaManager:_RemoveEvent()
	GBattleEvent:GetDispatcher():RemoveEvent(BATTLE_EVENT.ADD_CHARACTER,self._OnAddCharacter)
	GBattleEvent:GetDispatcher():RemoveEvent(BATTLE_EVENT.REMOVE_CHARACTER,self._OnRemoveCharacter)
	GBattleEvent:GetDispatcher():RemoveEvent(BATTLE_EVENT.UPDATE_CHARACTER_GLASS,self._OnUpdateCharacterGlass)

	GBattleEvent:GetDispatcher():RemoveEvent(BATTLE_EVENT.START_GAME,self._OnStartGame)
end

--brief 游戏开始刷新所有对象
function ZTCharaManager:_OnStartGame(playerList,ownerId)
	
	--移除玩家
	for i,v in pairs(self.m_tCharaList) do
		if not playerList[v.m_nBattleId] then
			self:_OnRemoveCharacter(v.m_nBattleId)
		end
	end

	--添加玩家
	for i,v in pairs(playerList) do
		if not self.m_tCharaList[v.battleId] then
			local data = GBattleEvent:GetBattleData(v.battleId,1,v.pos,v.camp,v.attritList)
			self:_OnAddCharacter(data)
		else
			chara:SetData(v)
		end
	end
	self.m_tCharaTeamList = nil
	
	GlobalBattleCtrl:SetMainCharacter(ownerId or self.m_tSortCharaList[1]:GetBattleId())

end

--@brief change glass id
function ZTCharaManager:_OnUpdateCharacterGlass(battleId)
	local chara = self.m_tCharaList[battleId]
	local owner = GlobalBattleCtrl:GetOwnerChara()
	if chara.m_nGlassId > 0 then
		if chara.m_nCampId == owner.m_nCampId or chara.m_nGlassId ==  owner.m_nGlassId then
			chara:ChangeTranslucence(TransLevelDefine.Trans)
		else
			chara:ChangeTranslucence(TransLevelDefine.Hide)
		end
	else
		chara:ChangeTranslucence(TransLevelDefine.Normal)
	end
end

--@brief 添加对象
function ZTCharaManager:_OnAddCharacter(battleData)
	CSLog("ZTCharaManager:_OnAddCharacter",battleData.battleId)
	--创建对象
	local chara = Character:Create(battleData,self.m_ztCharaContainer)

	--设置可见 
	chara:SetInCamera(true)
	chara:ShowBornSpEffect()
	--加入队列
	self.m_tCharaList[battleData.battleId] = chara
	table.insert(self.m_tSortCharaList,chara)
	--升序排序
	-- local function sortfunc(a,b)
 --        return a.battleId < b.battleId
 --    end
	-- table.sort(self.m_tSortCharaList,sortfunc)
end

--@brief 移除对象
function ZTCharaManager:_OnRemoveCharacter(battleId)
	CSLog("ZTCharaManager:_OnRemoveCharacter",battleId)
	self.m_tCharaList[battleId] = nil
	for i = 1,#self.m_tSortCharaList do
		local chara = self.m_tSortCharaList[i]
		if chara:GetBattleId() == battleId then
			chara:Destroy()
			table.remove(self.m_tSortCharaList,i)
			break
		end
	end
end

--开始战斗推送角色数据
-- function ZTCharaManager:OnBeginBattle(p_map_role)

-- 	if not p_map_role then return end

--  	for i = 1,#p_map_role do
--  		local role = p_map_role[i]
--  		local battleId = role.id
--  		local CareerType = role.job
--  		local pos = BattleDefine:GetClientPos(role.x,role.y,role.z)
--  		local camp = role.team
--  		local attributeList = self:_GetAttributeList(role.base_attr,role.hp,role.mp)

--  		local player = GBattleEvent:GetBattleData(battleId,CareerType,pos,camp,attributeList)
-- 		GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.ADD_CHARACTER, player)

--  	end


-- end

-- --@brief 获得属性列表
-- function ZTCharaManager:_GetAttributeList(p_base_attr,hp,mp)
-- 	local list = {}
-- 	table.insert(list, {AttributeType.HpMax, p_base_attr.hp_max })
-- 	table.insert(list, {AttributeType.AttackMin, p_base_attr.attack_min })
-- 	table.insert(list, {AttributeType.AttackMax, p_base_attr.attack_max })
-- 	table.insert(list, {AttributeType.Defense, p_base_attr.defense })
-- 	table.insert(list, {AttributeType.AttackSpeed, p_base_attr.attack_speed })

-- 	table.insert(list, {AttributeType.HpRec, p_base_attr.hp_rec })
-- 	table.insert(list, {AttributeType.MpMax, p_base_attr.mp_max })
-- 	table.insert(list, {AttributeType.Luck, p_base_attr.lucky })----------
-- 	table.insert(list, {AttributeType.Curse, p_base_attr.curse })
-- 	table.insert(list, {AttributeType.MoveSpeed, p_base_attr.move_speed })

-- 	table.insert(list, {AttributeType.AttackAcc, p_base_attr.attack_acc })
-- 	table.insert(list, {AttributeType.HurtDec, p_base_attr.hurt_dec })
-- 	table.insert(list, {AttributeType.CDAcc, p_base_attr.cd_acc })
-- 	table.insert(list, {AttributeType.Hp, hp })
-- 	table.insert(list, {AttributeType.Mp, mp })

-- 	table.insert(list, {AttributeType.MpRec, p_base_attr.mp_rec })
-- 	return list
-- end

--@brief 测试技能
function ZTCharaManager:_InitSkillTest()
	local list = {CSVector3(270,0,240),CSVector3(270,0,250),CSVector3(270,0,260),CSVector3(270,0,270),CSVector3(270,0,280)}
	local index = math.random(1,#list)
	local pos = list[index]
	table.remove(list,index)
	


	local player1 = GBattleEvent:GetBattleData(1,CareerType.Hero,pos,1,self:_GetAttributeList())
	GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.ADD_CHARACTER, player1)
	
	index = math.random(1,#list)
	pos = list[index]
	local player2 = GBattleEvent:GetBattleData(2,CareerType.Hero,pos,2,self:_GetAttributeList())
	GBattleEvent:GetDispatcher():DispatchEvent(BATTLE_EVENT.ADD_CHARACTER, player2)
end

--@brief 获得属性列表
function ZTCharaManager:_GetAttributeList()
	local list = {}
	table.insert(list, {AttributeType.HpMax, 100 })
	table.insert(list, {AttributeType.AttackMin, 10 })
	table.insert(list, {AttributeType.AttackMax, 20 })
	table.insert(list, {AttributeType.Defense, 10 })
	table.insert(list, {AttributeType.AttackSpeed, 10 })

	table.insert(list, {AttributeType.HpRec, 10 })
	table.insert(list, {AttributeType.MpMax, 100 })
	table.insert(list, {AttributeType.Luck, 10 })
	table.insert(list, {AttributeType.Curse, 10 })
	table.insert(list, {AttributeType.MoveSpeed, 10 })

	table.insert(list, {AttributeType.AttackAcc, 10 })
	table.insert(list, {AttributeType.HurtDec, 10 })
	table.insert(list, {AttributeType.CDAcc, 10 })
	table.insert(list, {AttributeType.Hp, 100 })
	table.insert(list, {AttributeType.Mp, 100 })

	table.insert(list, {AttributeType.MpRec, 10 })
	return list
end
