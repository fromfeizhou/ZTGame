--MapCircleManager.txt
--@breif 地图毒圈管理器
--@data 2018/03/07

--@brief c#引用
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSVector3 = CS.UnityEngine.Vector3
local CSVector2 = CS.UnityEngine.Vector2
local CSMathf = CS.UnityEngine.Mathf
local CSLog = CS.GameTool.Log




MapCircleManager = {
	m_fbxDuCircle = nil,

	m_isStart = false,

	m_circle = nil,--网络基础数据
	m_curCircle = nil,--当前毒圈数据

	m_scrCircle = nil,--原始圈信息
	m_destCircle = nil,--目标圈信息

	m_isWait = true,--状态，true等待，false移动
	m_waitTime = nil,--等待时间

	m_mapFlagData = nil,

	m_noticeed = false,--是否已经缩圈提示过
}

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
function MapCircleManager:Create()
	LogC("MapCircleManager:Create")
	local obj = {}
	setmetatable( obj, { __index = MapCircleManager })
	obj:Init()
	return obj
end

--@brief 初始化
function MapCircleManager:Init()
	
	--添加事件监听
	self:_AddEvent()
	self:_LoadCircleFBX()

	if GameConfig.IsSingleScene then
		self:DebugInitMapCircleCommand()
	end

--临时处理
	math.randomseed(os.time())
	for i = 1,#Tab_KillTips do
		Tab_KillTips[i].randNum=math.random(Tab_KillTips[i].timeMin,Tab_KillTips[i].timeMax)
	end

end

--@brief 移除
function MapCircleManager:Destroy()
	CSLog("MapCircleManager:Destroy")
	self:_RemoveEvent()
end

--@brief 逻辑帧刷新
function MapCircleManager:UpdateCommand()
	--游戏当前帧数
	local curFrameNum = GlobalBattleCtrl:GetCurCommandFrame()
	self:CalculationCircle(curFrameNum)
	self:CheckSafeCircleTip(curFrameNum)
	self:TipsKillHero(curFrameNum)
	self:UpdateCircleFBX()
end

local curTipIndex = 1
function MapCircleManager:CheckSafeCircleTip(curFrameNum)
	if Tab_TipSafeCircle and curTipIndex <= #Tab_TipSafeCircle then 
		local nowGameTime = math.ceil(curFrameNum/GameConfig.CommandFrameNum) * 1000
		
		if nowGameTime > Tab_TipSafeCircle[curTipIndex].activeTime then
			LogC("MapCircleManager:CheckSafeCircleTip()",curTipIndex,Tab_TipSafeCircle[curTipIndex].offSetX,Tab_TipSafeCircle[curTipIndex].offSetY)
			local safeCircleTip = Tab_TipSafeCircle[curTipIndex]

			--tip参数
			local tipData = {
				tip = safeCircleTip.tipContent,
				showTime = safeCircleTip.showTime * 0.001,
				offSet = CSVector2(safeCircleTip.offSetX,safeCircleTip.offSetY),
			}
			PanelManager:ShowTip(tipData)

			curTipIndex = curTipIndex + 1
		end
	end
end

local curKillTipIndex = 1
function MapCircleManager:TipsKillHero(curFrameNum)
	if Tab_KillTips and curKillTipIndex <= #Tab_KillTips then 
		local nowGameTime = math.ceil(curFrameNum/GameConfig.CommandFrameNum) * 1000
		if nowGameTime > Tab_KillTips[curKillTipIndex].randNum then
			LogC("MapCircleManager:TipsKillHero()",curKillTipIndex,Tab_KillTips[curTipIndex].offSetX,Tab_TipSafeCircle[curTipIndex].offSetY)
			local safeCircleTip = Tab_KillTips[curKillTipIndex]

			--tip参数
			local tipData = {
				tip = safeCircleTip.killTips,
				showTime = safeCircleTip.showTime * 0.001,
				offSet = CSVector2(safeCircleTip.offSetX,safeCircleTip.offSetY),
			}
			PanelManager:ShowSkillTip(tipData)

			curKillTipIndex = curKillTipIndex + 1
		end
	end
end


--@brief 收到服务器毒圈信息
function MapCircleManager:SetMapCircleCommand(p_map_circle)
	LogC("MapCircleManager:SetMapCircleCommand",SerializeTable(p_map_circle))
	local circleData = {}
	for i=1,#p_map_circle do
		local netCircleData = p_map_circle[i]
		local tmpCircleData = {
			startFrame = netCircleData.begin_frame,
			endFrame = netCircleData.end_frame,
			startPos = CSVector2(netCircleData.x * 0.01,netCircleData.y * 0.01),
			endPos = CSVector2(netCircleData.dx * 0.01,netCircleData.dy * 0.01),
			startRadius = netCircleData.begin_radius * 0.01,
			endRadius = netCircleData.end_radius * 0.01,
		}
		table.insert(circleData,tmpCircleData)
	end
	self.m_circle = circleData

	MapCircleManager.m_scrCircle = {}
	MapCircleManager.m_destCircle = {}
end

function MapCircleManager:DebugInitMapCircleCommand( )
	local mapCircle = {}
	local tatalTime = 0
	for i=1,#Tab_Circle do
		local tabCircleData = Tab_Circle[i]
		local gameCircleData = {}

		gameCircleData.begin_frame = (tabCircleData.start + tatalTime) * GameConfig.CommandFrameNum
		gameCircleData.end_frame = (tabCircleData.start + tabCircleData.continued + tatalTime) * GameConfig.CommandFrameNum

		tatalTime = tabCircleData.start + tabCircleData.continued + tatalTime
		 
		gameCircleData.x = 100 * tabCircleData.x
		gameCircleData.y = 100 * tabCircleData.y

		if i == #Tab_Circle then
			gameCircleData.dx = 100 * Tab_Circle[i].x
			gameCircleData.dy = 100 * Tab_Circle[i].y
		else
			gameCircleData.dx = 100 * Tab_Circle[i+1].x
			gameCircleData.dy = 100 * Tab_Circle[i+1].y
		end
		gameCircleData.begin_radius = 100 * tabCircleData.startRadius
		gameCircleData.end_radius = 100 * tabCircleData.endRadius

		table.insert(mapCircle,gameCircleData)
	end
	self:SetMapCircleCommand(mapCircle)
end

function MapCircleManager:SetMapFlagList(p_mapflags)
	local mapFlagData = {}
	MapCircleManager.m_mapFlagData = {}
	for i=1, #p_mapflags do
		local playerId = p_mapflags[i].playerId
		local flagPos = p_mapflags[i].flagPos
		mapFlagData[playerId] = flagPos
	end
	MapCircleManager.m_mapFlagData = mapFlagData
end

function MapCircleManager:Request_SendPlayerPosFlag(mapFlagPos)
	local tmpMapFlagList = {}
	local tmpCircleData = {
		playerId = GlobalBattleCtrl:GetOwnerId(),
		flagPos = mapFlagPos
	}
	table.insert(tmpMapFlagList,tmpCircleData)
	self:SetMapFlagList(tmpMapFlagList)
end


--@brief 计算毒圈数据
function MapCircleManager:CalculationCircle(curFrameNum)

	if not self.m_circle then return end


	--获取当前帧对应的毒圈数据，所有毒圈数据用完之后，将清空
	self.m_curCircle = self:_GetCurCircleData(curFrameNum)
	if not self.m_curCircle then
		self.m_circle = nil
	 	return 
	end


	MapCircleManager.m_isWait = curFrameNum <= self.m_curCircle.startFrame

	--开始缩圈流程
	if not MapCircleManager.m_isStart then 
		if not MapCircleManager.m_isWait then
			MapCircleManager.m_isStart = true
		end
	end


	if MapCircleManager.m_isWait then 
		--毒圈等待
		local waitFrame = self.m_curCircle.startFrame - curFrameNum
		MapCircleManager.m_waitTime = math.ceil(waitFrame/GameConfig.CommandFrameNum)
	else
	end

		--毒圈移动
		self:_UpdateCircleInfo()
end

--@brief 场景毒圈移动
function MapCircleManager:UpdateCircleFBX()
	if self.m_fbxDuCircle and not MapCircleManager.m_isWait then 
		local curCircleInfo = MapCircleManager.m_scrCircle
		self.m_fbxDuCircle.transform.position = CSVector3(curCircleInfo.pos.x,0,curCircleInfo.pos.y)
		self.m_fbxDuCircle.transform.localScale = CSVector3.one * curCircleInfo.radius
	end
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

function MapCircleManager:_GetCurCircleData( frameNum )
	for i=1,#self.m_circle do
		if frameNum < self.m_circle[i].endFrame then 
			return self.m_circle[i]
		end
	end
	return nil
end


--@brief 更新当前圈数据
function MapCircleManager:_UpdateCircleInfo()

	--总帧数
	local frameCnt = self.m_curCircle.endFrame - self.m_curCircle.startFrame

	--当前缩圈帧索引
	local progressFrame = GlobalBattleCtrl:GetCurCommandFrame() - self.m_curCircle.startFrame
	local progress = progressFrame/frameCnt

	--缩圈进度
	if progress > 0 then
		MapCircleManager.m_scrCircle.pos = CSVector2.Lerp (self.m_curCircle.startPos,self.m_curCircle.endPos,progress)
		MapCircleManager.m_scrCircle.radius = CSMathf.Lerp (self.m_curCircle.startRadius,self.m_curCircle.endRadius,progress)

		MapCircleManager.m_destCircle.pos = self.m_curCircle.endPos
		MapCircleManager.m_destCircle.radius = self.m_curCircle.endRadius
	else
		MapCircleManager.m_scrCircle.pos = self.m_curCircle.startPos
		MapCircleManager.m_scrCircle.radius = self.m_curCircle.startRadius

		MapCircleManager.m_destCircle.pos = self.m_curCircle.endPos
		MapCircleManager.m_destCircle.radius = 0
	end
end


--@brief 场景毒圈加载
function MapCircleManager:_LoadCircleFBX()
	CS.AssetManager.LoadAsset(PathManager:GetModelPath("duquan/DuCircle"),function(target,path)
 		if target then
 			self.m_fbxDuCircle = CSGameObject.Instantiate(target)
		end
	end)
end

--@brief 添加事件监听
function MapCircleManager:_AddEvent()
	GBattleEvent:GetDispatcher():AddEvent(BATTLE_EVENT.ADD_CHARACTER,self._OnAddCharacter,self)
end

--@brief 移除事件监听
function MapCircleManager:_RemoveEvent()
	GBattleEvent:GetDispatcher():RemoveEvent(BATTLE_EVENT.ADD_CHARACTER,self._OnAddCharacter)
end
