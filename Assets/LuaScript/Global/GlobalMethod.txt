--@brief 字符串切割
function Split(s, sp)  
    local res = {}  
  
    local temp = s  
    local len = 0  
    while true do  
        len = string.find(temp, sp)  
        if len ~= nil then  
            local result = string.sub(temp, 1, len-1)  
            temp = string.sub(temp, len+1)  
            table.insert(res, result)  
        else  
            table.insert(res, temp)  
            break  
        end  
    end  
  
    return res  
end  

--@brief 从当前字符串的开头和结尾删除所有空白字符后剩余的字符串
function Trim (s) 
  return (string.gsub(s, "^%s*(.-)%s*$", "%1")) 
end

--@brief Debug输出
function GCSLog(...)
    if not GameConfig.IsDebug then
        return
    end
    CS.GameTool.Log(...)
end

--@brief 序列化table表
function SerializeTable(tTable,index)
    if not GameConfig.IsDebug then
        return ""
    end
    local str = ""
    index = index or 0
    local space = ""
    for i = 1,index do
        space = space .. "    "
    end
    if index > 5 then
        return "[over len table]"
    end
    for key,value in pairs(tTable) do
		local res = tostring(value)
		if value and type(value) == "table" then
			res =  SerializeTable(value,index + 1)
		end
        str = str ..space.. "["..tostring(key).."] = "..res..'\n'
    end
    
    return "{\n"..str..space.."}"
end

--@brief table表长度
function ZTableLen(tTable)
    local count = 0
    for key,value in pairs(tTable) do
        count = count +1
    end
    return count
end

--@brief 获取坐标table
--@param {x,y,z} / {pos}
function GetPosTab(...)
    local args = { ... }
    if # args == 3 then
        return { x = args[1], y = args[2], z = args[3] }
    end

    if # args == 1 then
        return { x = args[1].x, y = args[1].y, z = args[1].z }
    end
end

--brief 判断GameObject是否为空
function GameObjectIsNotNull( gameObject )
    return CS.GameTool.IsDestroyed(gameObject)
end







