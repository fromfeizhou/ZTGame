--LoginModel.txt
--@breif lua入口
--@data 2018/3/5



--@brief c#引用
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSVector3 = CS.UnityEngine.Vector3
local CSLog = GCSLog

LoginModel = {
	
	m_nlogin_create_role_s2c = nil,
	m_nlogin_select_role_s2c = nil,

	m_pIsOpenedCreatePanel = false,
	m_pAccname = nil,
	m_pKey = nil,

}
setmetatable( LoginModel, { __index = BaseModel})

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
function LoginModel:Create()
	local obj = {}
	setmetatable( obj, { __index = LoginModel })
	obj:Init()
	return obj
end

--@brief 子类重写 - 模块初始化
function LoginModel:onInitModel()
	self.m_panelDefine[LOGIN_TYPE.MAIN] = LoginMainPanel
	self.m_panelDefine[LOGIN_TYPE.CREATEROLE] = LoginCreateRolePanel
end


--@brief 子类重写 - 添加事件监听
function LoginModel:_AddEvents( )
end

--@brief 子类重写 - 移除事件监听
function LoginModel:_RemoveEvents( )
end

--@brief 注册网络门户
function LoginModel:_RegNetFacade()
	ZTProtocol:Register(PROTOCOL.LOGIN_AUTH_KEY, self._Receive_Login_Auth_Key, self)
end

--@brief 注销网络门户
function LoginModel:_UnRegNetFacade()
	ZTProtocol:Unregister(PROTOCOL.LOGIN_AUTH_KEY,self._Receive_Login_Auth_Key)
end


function LoginModel:LoginFinish()
	GCSLog("登录完成，进入游戏")
	LuaGameStart:EnterGameCity()
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 回复 - 登录验证
function LoginModel:_Receive_Login_Auth_Key(pbData)
	GCSLog("LoginModel:_Receive_Login_Auth_Key")
	NetWorkManager.m_loginAuthKey = pbData
	GCSLog(SerializeTable(pbData))

	--隐藏锁屏面板
	local dispatcher = GlobalData:GetMdlEventDispatcher()
	local panelData = {}
	panelData.modelType = MODEL_TYPE.SYSTEM
	panelData.panelType = SYSTEM_TYPE.LOCK
	dispatcher:DispatchEvent(MDL_EVENT.HIDE_PANEL,panelData)
	
	--请求登录服务器
	self:Request_Login()
end

--@brief 请求 - 登录服务器 - PB_LOGIN.MODEL - PB_LOGIN.LOGIN
function LoginModel:Request_Login()
	local package 	= Package:Create(PROTOCOL.LOGIN_LOGIN)
	package.data = {}
	package.data.accname 		= self.m_pAccname	-- 用户名
	package.data.key 			= self.m_pKey		-- 验证key
	package.data.fcm 			= 0 			-- 防沉迷信息(暂不使用)
	package.data.serv_id 		= 0 			-- 服务器ID
	package.data.platform		= 0 			-- 平台，为0则为本地开发
	package.data.token			= "" 				-- 验证数据串
	package.data.device_id		= ""				-- 设备ID
	package.data.device_desc 	= "" 			-- 设备描述
	package.data.product_code	= "" 			-- quickSDK产品code
	package.data.uid 			= "" 			-- quickSDK的uid
	package.data.nick_name		= "" 				-- 昵称
	GCSLog("self.m_model:NetWork_RequestLogin","accname:",package.data.accname,"key",self.m_pKey)
	NetWorkManager:SendNetMsg(package)
end