--LoginModel.txt
--@breif lua入口
--@data 2018/3/5
LoginModel = {
	m_tPanelList = nil,
	m_nlogin_create_role_s2c = nil,
	m_nlogin_select_role_s2c = nil,

}

--@brief c#引用
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSVector3 = CS.UnityEngine.Vector3
local CSLog = GCSLog

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
function LoginModel:Create()
	local obj = {}
	setmetatable( obj, { __index = LoginModel })
	obj:Init()
	return obj
end

--@brief 初始化
function LoginModel:Init()
	self.m_tPanelList = {}
end

--@brief 更新
function LoginModel:Update()
end


--@brief 移除
function LoginModel:Destroy()
	print("LoginModel:Destroy")
	if self.m_tPanelList then
		for i,panel in pairs(self.m_tPanelList) do
			panel:Destroy()
		end
		self.m_tPanelList = nil
	end
end

--@breif 显示面板
function LoginModel:ShowPanel( panelType )
	local panel = nil
	if self.m_tPanelList[panelType] then
		panel = self.m_tPanelList[panelType]
	else
		if panelType == LOGIN_TYPE.MAIN then
			panel = LoginMainPanel:Create()
		elseif panelType == LOGIN_TYPE.CREATEROLE then
			panel = LoginCreateRolePanel:Create()
		end
		self.m_tPanelList[panelType] = panel
	end

	if panel then
		panel:Show()
	end
end

function LoginModel:HidePanel(panelType)

	local panel = nil
	if self.m_tPanelList[panelType] then
		panel = self.m_tPanelList[panelType]
	else
		GCSLog("LoginModel:HidePanel","found out",panelType)
	end

	if panel then
		panel:Hide()
	end
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 请求 - 创建角色
function LoginModel:NetWork_RequestCreateRole(jobId)
	GCSLog("LoginModel:NetWork_RequestCreateRole")
	local package 	= {}
	package.model 	= PB_LOGIN.MODEL
	package.command = PB_LOGIN.CREATE_ROLE
	package.data = {
		name = "tdfsdfset", 	-- 人物名字
		job = jobId,	-- 角色职业
		sex = 1,		-- 性别
		serv_id = 0,	-- 服务器ID
	}
	NetWorkManager:SendNetMsg(package)
end

--@brief 回复 - 创建角色
function LoginModel:Receive_RequestCreateRole(login_create_role_s2c)
	GCSLog("LoginModel:Receive_RequestCreateRole")
	GCSLog("角色ID",login_create_role_s2c.id)
	GCSLog("错误码",login_create_role_s2c.code)
	self.m_nlogin_create_role_s2c = login_create_role_s2c
	
	self:NetWork_RequestSeleftRole(self.m_nlogin_create_role_s2c.id)
end

--@brief 回复 - 选择角色
function LoginModel:NetWork_RequestSeleftRole(roleId)
	GCSLog("LoginModel:NetWork_RequestSeleftRole", roleId)

	local package 	= {}
	package.model 	= PB_LOGIN.MODEL
	package.command = PB_LOGIN.SELECT_ROLE
	package.data = {
		id = roleId
	}
	
	NetWorkManager:SendNetMsg(package)
end

--@brief 回复 - 选择角色
function LoginModel:Receive_RequestSelectRole(login_select_role_s2c)
	GCSLog("LoginModel:Receive_RequestSelectRole")
	GCSLog("错误码",login_select_role_s2c.code)
	self.m_nlogin_select_role_s2c = login_select_role_s2c
end