--LoginModel.txt
--@breif lua入口
--@data 2018/3/5
LoginModel = {
	m_tPanelList = nil,
	m_nlogin_create_role_s2c = nil,
	m_nlogin_select_role_s2c = nil,

	m_pIsOpenedCreatePanel = false,
	m_pAccname = nil,
	m_pKey = nil,
}

--@brief c#引用
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSVector3 = CS.UnityEngine.Vector3
local CSLog = GCSLog

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
function LoginModel:Create()
	local obj = {}
	setmetatable( obj, { __index = LoginModel })
	obj:Init()
	return obj
end

--@brief 初始化
function LoginModel:Init()
	self.m_tPanelList = {}
end

--@brief 更新
function LoginModel:Update()
end


--@brief 移除
function LoginModel:Destroy()
	print("LoginModel:Destroy")
	if self.m_tPanelList then
		for i,panel in pairs(self.m_tPanelList) do
			panel:Destroy()
		end
		self.m_tPanelList = nil
	end
end


--@breif 显示面板
function LoginModel:ShowPanel( panelType )
	local panel = nil
	if self.m_tPanelList[panelType] then
		panel = self.m_tPanelList[panelType]
	else
		if panelType == LOGIN_TYPE.MAIN then
			panel = LoginMainPanel:Create(self)
		elseif panelType == LOGIN_TYPE.CREATEROLE then
			panel = LoginCreateRolePanel:Create(self)
		end
		self.m_tPanelList[panelType] = panel
	end

	if panel then
		panel:Show()
	end
end

--@breif 隐藏面板
function LoginModel:HidePanel(panelType)

	local panel = nil
	if self.m_tPanelList[panelType] then
		panel = self.m_tPanelList[panelType]
	else
		GCSLog("LoginModel:HidePanel","found out",panelType)
	end

	if panel then
		panel:Hide()
	end
end

function LoginModel:LoginFinish()
	GCSLog("登录完成，进入游戏")
	LuaGameStart:EnterGameCity()
end

--@brief 请求 - 登录服务器 - PB_LOGIN.MODEL - PB_LOGIN.LOGIN
function LoginModel:Request_Login()
	local pbData 	= {}
	pbData.model 	= PB_LOGIN.MODEL
	pbData.command 	= PB_LOGIN.LOGIN
	pbData.data = {}
	pbData.data.accname 		= self.m_pAccname	-- 用户名
	pbData.data.key 			= self.m_pKey		-- 验证key
	pbData.data.fcm 			= 0 			-- 防沉迷信息(暂不使用)
	pbData.data.serv_id 		= 0 			-- 服务器ID
	pbData.data.platform		= 0 			-- 平台，为0则为本地开发
	pbData.data.token			= "" 				-- 验证数据串
	pbData.data.device_id		= ""				-- 设备ID
	pbData.data.device_desc 	= "" 			-- 设备描述
	pbData.data.product_code	= "" 			-- quickSDK产品code
	pbData.data.uid 			= "" 			-- quickSDK的uid
	pbData.data.nick_name		= "" 				-- 昵称
	GCSLog("self.m_model:NetWork_RequestLogin","accname:",pbData.data.accname,"key",self.m_pKey)
	NetWorkManager:SendNetMsg(pbData)
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
