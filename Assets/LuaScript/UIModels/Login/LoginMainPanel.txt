--LoginMainPanel.txt
--@breif lua入口
--@data 2018/3/5

--@brief c#引用
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSVector3 = CS.UnityEngine.Vector3


LoginMainPanel = {
	m_panelName = "LoginMainPanel",
	m_inputAccount = nil,
	m_serverItem_Prefab = nil,
	m_txtCurServerName = nil,
	m_serverListPanelParent = nil,
	m_curSelectAddress = nil,
	m_tServerItemList = nil,
}

setmetatable( LoginMainPanel, { __index = UIBasePanel})

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Base Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
function LoginMainPanel:GetName()
	return "LoginMainPanel"
end
--@brief 面板被创建
function LoginMainPanel:onCreatePanel()	
	-- 按钮 - 服务器列表
	PanelWidget:GetButton(self.m_transform,"ViewPort_Login/Group_CurServer/Btn_SelectServer",function() self:_OnBtnClick_ServerList() end)

	-- 按钮 - 登录游戏
	PanelWidget:GetButton(self.m_transform,"ViewPort_Login/Btn_Login",function() self:_OnBtnClick_Login() end)

	-- 按钮 - 登录游戏(无网络)
	PanelWidget:GetButton(self.m_transform,"ViewPort_Login/Btn_LoginNoNet",function() self:_OnBtnClick_LoginNoNet() end)

	-- 输入框 - 账号
	self.m_inputAccount = PanelWidget:GetText(self.m_transform,"ViewPort_Login/IF_Account/InputField/Text");
	
	-- 输入框 - 密码
	self.m_inputKey = PanelWidget:GetText(self.m_transform,"ViewPort_Login/IF_PassWord/InputField/Text");
	
	-- 文本 - 当前服务器信息
	self.m_txtCurServerName = PanelWidget:GetText(self.m_transform,"ViewPort_Login/Group_CurServer/Txt_CurServer");

	-- 节点 - 服务器地址预设父物体
	self.m_serverListPanelParent = PanelWidget:GetChild(self.m_transform,"ViewPort_ServerList");

	-- 预设 - 服务器地址预设
	self.m_serverItem_Prefab = PanelWidget:GetChild(self.m_transform,"ViewPort_ServerList/Scroll View/Viewport/Content/ServerItem");
end

--@brief 面板初始化
function LoginMainPanel:onInitPanel()
	NetWorkManager:InitServerList()
end

--@brief 面板每帧更新
function LoginMainPanel:onTick(deltaTime)
end

--@brief 销毁登录面板
function LoginMainPanel:onDestroy()
end

--@brief 添加事件监听
function LoginMainPanel:_AddEvents()
	GlobalData:GetNetEventDispatcher():AddEvent(NET_EVENT.SERVER_FINISH,self._OnServerFinish,self)
end

--@brief 移除事件监听
function LoginMainPanel:_RemoveEvents()
	GlobalData:GetNetEventDispatcher():RemoveEvent(NET_EVENT.SERVER_FINISH,self._OnServerFinish)
end

--@brief 注册网络门户
function LoginMainPanel:_RegNetFacade()
	ZTProtocol:Register(PROTOCOL.LOGIN_LOGIN, self._Receive_Login_Login, self)
	ZTProtocol:Register(PROTOCOL.LOGIN_CREATE_ROLE, self._Receive_Create_Role, self)
	ZTProtocol:Register(PROTOCOL.LOGIN_SELECT_ROLE, self._Receive_Select_Role, self)
end

--@brief 注销网络门户
function LoginMainPanel:_UnRegNetFacade()
	ZTProtocol:Unregister(PROTOCOL.LOGIN_LOGIN,			self._Receive_Login_Login)
	ZTProtocol:Unregister(PROTOCOL.LOGIN_CREATE_ROLE, 	self._Receive_Create_Role)
	ZTProtocol:Unregister(PROTOCOL.LOGIN_SELECT_ROLE, 	self._Receive_Select_Role)
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Base End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--@brief 创建角色回复
function LoginMainPanel:_Receive_Create_Role(login_create_role)
	GCSLog("LoginMainPanel:_Receive_Create_Role", login_create_role.code)
end

--@brief 事件监听 - 下载服务器列表数据完成
function LoginMainPanel:_OnServerFinish( serverList )
	self.m_curSelectAddress = serverList[1]
	self.m_tServerItemList = {}
	for i=1,#serverList do
		local serverItem = self:_CreateServerItem(serverList[i])
		table.insert(self.m_tServerItemList,serverItem)
	end
	self:_Update_CurServerName();
end

--@brief 显示服务器列表
function LoginMainPanel:_ShowServerList()
	self.m_serverListPanelParent.gameObject:SetActive(true)
end

--@brief 隐藏服务器列表
function LoginMainPanel:_HideServerList()
	self.m_serverListPanelParent.gameObject:SetActive(false)
end

--@brief 按钮 - 服务器列表
function LoginMainPanel:_OnBtnClick_ServerList()
	self:_Update_ServerItem();
	self:_ShowServerList()
end

--@brief 按钮 - 登录
function LoginMainPanel:_OnBtnClick_Login()
	GameConfig.IsSingleScene = false

	self.m_model.m_pAccname = self.m_inputAccount.text
	self.m_model.m_pKey		= self.m_inputKey.text
	NetWorkManager:RequestConnect(self.m_curSelectAddress)

	GCSLog("LoginMainPanel:_OnBtnClick_Login:", self.m_model.m_pAccname)
end

--@brief 按钮 - 无网络登录
function LoginMainPanel:_OnBtnClick_LoginNoNet()
	GCSLog("LoginMainPanel:_OnBtnClick_LoginNoNet()")
	GameConfig.IsSingleScene = true
	self.m_model:LoginFinish()
end

--@brief 创建服务器Item
function LoginMainPanel:_CreateServerItem( addressData )
	local serverItem = {}
	serverItem.itemData = addressData
	serverItem.transform = CSTransform.Instantiate(self.m_serverItem_Prefab, self.m_serverItem_Prefab.parent)
	serverItem.txtServerName = PanelWidget:GetText(serverItem.transform,"Txt_ServerName")
	PanelWidget:GetButton(serverItem.transform,"Btn_Confirm",function () self:_Select_ServerItem(addressData) end)
	serverItem.txtServerName.text = addressData.name
	serverItem.transform.gameObject:SetActive(true)
	return serverItem
end

--@brief 选择服务器Item
function LoginMainPanel:_Select_ServerItem( addressData )
	self.m_curSelectAddress = addressData
	self:_Update_CurServerName()
	self:_HideServerList()
end

--@brief 刷新所有服务器Item
function LoginMainPanel:_Update_ServerItem()
	for i=1,#self.m_tServerItemList do
		local serverItem = self.m_tServerItemList[i]
		serverItem.txtServerName.text = serverItem.itemData.name
		if serverItem.itemData.name == self.m_curSelectAddress.name then
			serverItem.txtServerName.text = serverItem.txtServerName.text .. "(当前选中)"
		end
	end
end

--@brief 刷新当前服务器地址数据
function LoginMainPanel:_Update_CurServerName( )
	self.m_txtCurServerName.text =  self.m_curSelectAddress.name .. "(" .. self.m_curSelectAddress.host .. ":" .. self.m_curSelectAddress.port .. ")"
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--********************NetWork Request Start***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


--@brief 请求 - 选择角色 - PB_LOGIN.MODEL - PB_LOGIN.SELECT_ROLE
function LoginMainPanel:_Request_Select_Role(roleId)
    GCSLog("LoginMainPanel:_Request_Select_Role", roleId)
    local package = Package:Create(PROTOCOL.LOGIN_SELECT_ROLE)
    package.data = {
        id = roleId
    }
    NetWorkManager:SendNetMsg(package)
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--********************NetWork Request End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--********************NetWork Receive Start***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 回复 - 登录服务器 - PB_LOGIN.MODEL - PB_LOGIN.LOGIN
function LoginMainPanel:_Receive_Login_Login(login_login_s2c)
	GCSLog("LoginMainPanel:_Receive_Login_Login=======",login_login_s2c.code,"===============")
	if login_login_s2c.code == 0 then--成功
		self:_Request_Select_Role(login_login_s2c.login_info[1].id)
	elseif login_login_s2c.code == 12 then--没有角色

--[[
		--显示创角界面
		local dispatcher = GlobalData:GetMdlEventDispatcher()
		
		local modelData_CreateRole = {
			modelType = MODEL_TYPE.LOGIN,
			panelType = LOGIN_TYPE.CREATEROLE
		}
		dispatcher:DispatchEvent(MDL_EVENT.SHOW_PANEL,modelData_CreateRole)
]]
			
		self:_Request_Create_Role(0)
		local modelData_LoginRole = {
			modelType = MODEL_TYPE.LOGIN,
			panelType = LOGIN_TYPE.MAIN,
		}
		GlobalData:GetMdlEventDispatcher():DispatchEvent(MDL_EVENT.HIDE_PANEL,modelData_LoginRole)

		
	elseif login_login_s2c.code == 20 then
		GCSLog("参数错误")
	
	end
end

--@brief 回复 - 选择角色 - PB_LOGIN.MODEL - PB_LOGIN.SELECT_ROLE
function LoginMainPanel:_Receive_Select_Role(login_select_role_s2c)
	GCSLog("LoginMainPanel:_Receive_Select_Role\n",SerializeTable(login_select_role_s2c))
	self.m_nlogin_select_role_s2c = login_select_role_s2c
	
	if self.m_model.m_pIsOpenedCreatePanel then 
		local modelData = {
			modelType = MODEL_TYPE.LOGIN,
			panelType = LOGIN_TYPE.CREATEROLE,
		}
		GlobalData:GetMdlEventDispatcher():DispatchEvent(MDL_EVENT.HIDE_PANEL,modelData)
	end
	self.m_model:LoginFinish()
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--********************NetWork Receive End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 请求 - 创建角色
function LoginMainPanel:_Request_Create_Role(jobId)
	GCSLog("LoginCreateRolePanel:_Request_Create_Role")
	local package 	= Package:Create(PROTOCOL.LOGIN_CREATE_ROLE)
	package.data = {
		name = self.m_model.m_pAccname, 	-- 人物名字
		job = jobId,	-- 角色职业
		sex = 1,		-- 性别
		serv_id = 0,	-- 服务器ID
	}
	NetWorkManager:SendNetMsg(package)
end