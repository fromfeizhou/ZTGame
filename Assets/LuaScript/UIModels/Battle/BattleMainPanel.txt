local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSRectTransform = CS.UnityEngine.RectTransform
local CSVector3 = CS.UnityEngine.Vector3
local CSVector2 = CS.UnityEngine.Vector2
local CSCANVAS = CS.UnityEngine.Canvas

BattleMainPanel = {
	m_panelName = "BattleMainPanel",
	m_bagBtn=nil,

	m_rootLeftUp = nil,
	m_rootLeftDown = nil,
	m_rootRightUp = nil,
	m_rootRightDown = nil,
	m_rootTop = nil,
	
	m_tBagPanel = nil, --背包
	m_tQuickBagPanel = nil, --快速背包
	m_tRadarPanel = nil, --雷达面板
	m_tScrollPanel = nil, --地图卷轴

	m_tHeadItemMgr = nil,	--血槽，扣血特效
}

setmetatable( BattleMainPanel, { __index = UIBasePanel})


function BattleMainPanel:GetName()
	return "BattleMainPanel"
end

--@brief 面板资源相对模块路径
function BattleMainPanel:GetRelativePath()
	return "Panel/"
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--@brief 子类重写 - 面板被创建
function BattleMainPanel:onCreatePanel()

	self.m_rootLeftUp 		= self.m_transform:Find("LeftUpContent")
	self.m_rootLeftDown 	= self.m_transform:Find("LeftDownContent")
	self.m_rootRightUp 		= self.m_transform:Find("RightUpContent")
	self.m_rootRightDown 	= self.m_transform:Find("RightDownContent")
	self.m_rootTop			= self.m_transform:Find("TopContent")

	self:_CreateMoveJoystick()
	self:_CreateSkillBtn()
	self:_CreateMapRaderPanel()

	local layerRoot = PanelManager:GetLayerRoot(LAYER_TYPE.NORMAL)
	local canvas = layerRoot:GetComponent(typeof(CSCANVAS))

	self.m_tHeadItemMgr = HeadItemManager:Create(canvas, self.m_rootTop)

	self.m_bagBtn=PanelWidget:GetZTButton(self.m_transform,"RightUpContent/BagButton",function() self:_OnClickBagBtn() end)

end

--@brief 子类重写 - 面板初始化
function BattleMainPanel:onInitPanel()
end

--@brief 子类重写 - 面板更新
function BattleMainPanel:onUpdate()
end

--@brief 子类重写 - 面板每帧更新
function BattleMainPanel:onTick(deltaTime)
	if self.m_tRadarPanel and self.m_tRadarPanel.m_LoadFinish and self.m_tRadarPanel.m_isShow and self.m_tRadarPanel.onTick then
		self.m_tRadarPanel:onTick(deltaTime)
	end

	if self.m_tScrollPanel and self.m_tScrollPanel.m_LoadFinish and self.m_tScrollPanel.m_isShow and self.m_tScrollPanel.onTick then
		self.m_tScrollPanel:onTick(deltaTime)
	end

	if self.m_tHeadItemMgr then
		self.m_tHeadItemMgr:Update()
	end

	self:_CheckQuickBagPanel()
	
end

--@brief 子类重写 - 面板被销毁
function BattleMainPanel:onDestroy()
	if self.m_tHeadItemMgr then
		self.m_tHeadItemMgr:Destroy()
		self.m_tHeadItemMgr = nil
	end
end

--@brief 子类重写 - 显示面板
function BattleMainPanel:onShow()
end

--@brief 子类重写 - 隐藏面板
function BattleMainPanel:onHide()
end

--@brief 子类重写 - 添加事件监听
function BattleMainPanel:_AddEvents( )
end

--@brief 子类重写 - 移除事件监听
function BattleMainPanel:_RemoveEvents( )
end

--@brief 子类重写 - 注册网络门户
function BattleMainPanel:_RegNetFacade( )
end

--@brief 子类重写 - 注销网络门户
function BattleMainPanel:_UnRegNetFacade( )
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 创建 技能按钮
function BattleMainPanel:_CreateSkillBtn()
	local testSkillId = {1001,1101,1102,1103}

	for i = 1, #testSkillId do
		local skillId = testSkillId[i]
		local template = Tab_Skill[skillId] or Tab_Skill[1001]
		GCSLog("BattleMainPanel:_InitSkillBtn",skillId,template.operaDistance)

		local skillBtnRoot = self.m_rootRightDown:Find(string.format("SkillBtnNode/SkillBtn%02d",i))
		if template.operaDistance > 0 then
			SkillJoystick:Create(skillId,skillBtnRoot)
		else
			CommonSkillBtn:Create(skillId,skillBtnRoot)
		end 
	end
end

--@brief 创建 移动摇杆
function BattleMainPanel:_CreateMoveJoystick()

	MoveJoystick:Create(self.m_rootLeftDown)
end

--@brief 创建 背包
function BattleMainPanel:_CreateBagPanel()
	local panel = {}
	setmetatable( panel, { __index = BattleBagPanel })
	panel:_LoadAssetPanel(self.m_rootRightUp, self.m_model)
	self.m_tBagPanel = panel
end

--@brief 创建 快速背包
function BattleMainPanel:_CreateQuicBagPanel(panelData)
	local panel = {}
	setmetatable( panel, { __index = QuickBagPanel })
	panel:_LoadAssetPanel(self.m_rootTop, self.m_model, panelData)
	self.m_tQuickBagPanel = panel
end

--@brief 创建 雷达地图
function BattleMainPanel:_CreateMapRaderPanel()
	local panel = {}
	setmetatable( panel, { __index = MapRadarPanel })
	panel:_LoadAssetPanel(self.m_rootLeftUp, self.m_model)
	panel:SetClickOpenMapScroll(function ( ) self:_OnClickMapScrollBtn() end )
	self.m_tRadarPanel = panel
end

--@brief 创建 地图卷轴
function BattleMainPanel:_CreateMapScrollPanel()
	local panel = {}
	setmetatable( panel, { __index = MapScrollPanel })
	panel:_LoadAssetPanel(self.m_rootTop, self.m_model)
	self.m_tScrollPanel = panel
end

--@brief 按钮点击-开启背包
function BattleMainPanel:_OnClickBagBtn( )
	--[[
	if self.m_tBagPanel then
		GCSLog("BattleMainPanel:_OnClickBagBtn",self.m_tBagPanel.m_isShow)
		if self.m_tBagPanel.m_isShow == true then
			self.m_tBagPanel:Hide()
		else
			self.m_tBagPanel:Show()
		end
	else
		self:_CreateBagPanel()
	end
	]]
	GlobalBattleCtrl:ExitBattle()
end

--@brief 按钮点击-开启地图卷轴
function BattleMainPanel:_OnClickMapScrollBtn( )
	if self.m_tScrollPanel then
		self.m_tScrollPanel:Show()
	else
		self:_CreateMapScrollPanel()
	end
end

--@brief 检测快速拾取物品面板
function BattleMainPanel:_CheckQuickBagPanel()
	if BattleMapMgr.m_tPockItems and ZTableLen(BattleMapMgr.m_tPockItems) > 0 then
		local panelData = {
			items = BattleMapMgr.m_tPockItems,
		}

		if self.m_tQuickBagPanel then
			self.m_tQuickBagPanel:Show(panelData)
		else
			self:_CreateQuicBagPanel(panelData)
		end
	else
		if self.m_tQuickBagPanel then
			self.m_tQuickBagPanel:Hide()
		end
	end
end