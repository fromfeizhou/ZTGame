--MapRadarPanel.txt
--@breif lua入口
--@data 2018/3/5

--@brief c#引用
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSRectTransform = CS.UnityEngine.RectTransform
local CSVector3 = CS.UnityEngine.Vector3
local CSVector2 = CS.UnityEngine.Vector2
local CSColor = CS.UnityEngine.Color
local CSQuaternion = CS.UnityEngine.Quaternion

MapRadarPanel = {
	m_panelName = "MapRadarPanel",
	m_ztTxt_waitTime = nil,

	m_OnClickOpenMapScroll = nil,

	m_OnClickOpenMapScroll = nil,

	m_ztCircleCur = nil,
	m_ztCircleDest = nil,

	m_playerList = nil,

	m_playerItemParent = nil,
	m_prePlayerItem = nil,

	m_mapContent = nil,
}
setmetatable( MapRadarPanel, { __index = UIBasePanel})
function MapRadarPanel:GetName()
	return "MapRadarPanel"
end

--@brief 面板资源相对模块路径
function MapRadarPanel:GetRelativePath()
	return "Panel/"
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 面板被创建
function MapRadarPanel:onCreatePanel()	
	self.m_ztTxt_waitTime = PanelWidget:GetZTText(self.m_transform,"ViewPort/ztTxt_WaitTime")
	local mapConentTrans = PanelWidget:GetChild(self.m_transform,"ViewPort/Mask/Content")
	self.m_mapContent = mapConentTrans:GetComponent("RectTransform")

	--毒圈相关
	self.m_ztCircleCur = PanelWidget:GetZTCircle(mapConentTrans,"Circles/ZTCircleCur")
	self.m_ztCircleCur:Init(80,false,4.0)
	self.m_ztCircleCur:SetColor(CSColor.green)
	self.m_ztCircleDest = PanelWidget:GetZTCircle(mapConentTrans,"Circles/ZTCircleDest")
	self.m_ztCircleDest:Init(80,false,4.0)
	self.m_ztCircleDest:SetColor(CSColor.red)

	--玩家，队友
	self.m_playerItemParent = PanelWidget:GetChild(mapConentTrans,"PlayerList")
	self.m_prePlayerItem = PanelWidget:GetChild(self.m_playerItemParent,"PrePlayerItem")
	PanelWidget:GetZTButton(self.m_transform,"ViewPort/Mask/btnOpenMap",function () self.m_onClickOpenMapScroll() end)
	
end


function MapRadarPanel:SetClickOpenMapScroll( onClickOpenMapScroll )
	self.m_onClickOpenMapScroll = onClickOpenMapScroll
end

--@brief 面板初始化
function MapRadarPanel:onInitPanel()
	self:_UpdatePlayer()
end

--@brief 面板每帧更新
function MapRadarPanel:onTick(deltaTime)
	self:_UpdateCircle()
	self:_UpdatePlayer()
end

--@brief 销毁登录面板
function MapRadarPanel:onDestroy()
	
end

--@brief 添加事件监听
function MapRadarPanel:_AddEvents()
	GBattleEvent:GetDispatcher():AddEvent(BATTLE_EVENT.START_GAME,self._OnStartGame,self)
end

--@brief 移除事件监听
function MapRadarPanel:_RemoveEvents()
	GBattleEvent:GetDispatcher():RemoveEvent(BATTLE_EVENT.START_GAME,self._OnStartGame)
end

--@brief 注册网络门户
function MapRadarPanel:_RegNetFacade()
end

--@brief 注销网络门户
function MapRadarPanel:_UnRegNetFacade()
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 游戏开始时
function MapRadarPanel:_OnStartGame()
	self:_ClearPlayer()
end

--@brief 清除地图上的玩家
function MapRadarPanel:_ClearPlayer()
	if not self.m_playerList then return end
	for k,v in pairs(self.m_playerList) do
		CSGameObject.Destroy(v.gameObject)
	end
end

--@brief 在地图上创建一个玩家标识
function MapRadarPanel:_CreatePlayer( playerId )
	local playTransform = CSTransform.Instantiate(self.m_prePlayerItem,self.m_playerItemParent)
	local playRectTransform = playTransform:GetComponent("RectTransform")
	playTransform.name = playerId
	local ztImg = playTransform:GetComponent("ZTImage")
	if ztImg then
		if playerId == GlobalBattleCtrl:GetOwnerId() then
			ztImg.color = CSColor.green;
		else
			ztImg.color = CSColor.yellow;
		end
	end

	playTransform.gameObject:SetActive(true)
	return playRectTransform
end

--@brief 刷新地图上，玩家信息（角度，坐标）
function MapRadarPanel:_UpdatePlayer()
	if not self.m_playerList then self.m_playerList = {} end
	local team = GlobalBattleCtrl:GetOwnerTeamChara()
	for k,v in pairs(team) do
		local playerId = v:GetBattleId()

		self.m_playerList[playerId] = self.m_playerList[playerId] or self:_CreatePlayer(playerId)

		local pos = v:GetPos()
		--GCSLog("===================================MapRadarPanel:_UpdatePlayer",v:GetBattleId(),v:GetPos())
		self.m_playerList[playerId].anchoredPosition = {x=pos.x, y = pos.z}
		self.m_playerList[playerId].localEulerAngles = v:GetFaceAngle() * CSVector3.forward

		if playerId == GlobalBattleCtrl:GetOwnerId() then
			self.m_mapContent.anchoredPosition = -self.m_playerList[playerId].anchoredPosition
		end
	end
end

--@brief 刷新毒圈
function MapRadarPanel:_UpdateCircle()

	if MapCircleManager.m_isWait then 
		self.m_ztTxt_waitTime.text = MapCircleManager.m_waitTime
	else
		self:_SetCircle(self.m_ztCircleCur,MapCircleManager.m_scrCircle)
		self:_SetCircle(self.m_ztCircleDest,MapCircleManager.m_destCircle)
		self:Show_Circle()
	end
end

--@brief 显示毒圈
function MapRadarPanel:Show_Circle()
	self.m_ztCircleCur:Show()	
	self.m_ztCircleDest:Show()
end

--@brief 隐藏毒圈
function MapRadarPanel:Hide_Circle()
	self.m_ztCircleCur:Hide()	
	self.m_ztCircleDest:Hide()
end

--@brief 设置毒圈参数
function MapRadarPanel:_SetCircle(circle, circleInfo)
	circle:SetCircle(circleInfo.pos,circleInfo.radius)
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
