--BaseModel.txt
--@breif lua入口
--@data 2018/3/5

--@brief c#引用
local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSVector3 = CS.UnityEngine.Vector3
local CSLog = CS.GameTool.Log

BaseModel = {
	m_tPanelList = nil,
	m_panelDefine = nil,
	m_canvasRoot = nil,
	m_canvasName = "Canvas",
}

function  BaseModel:GetName()
	return "BaseModel"
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


--@brief 拷贝原表
function BaseModel:Create()
	local obj = {}
	setmetatable( obj, { __index = BaseModel })
	obj:Init()
	return obj
end

--@brief 初始化
function BaseModel:Init()
	self.m_tPanelList = {}
	self.m_panelDefine = {}
	self:onInitModel()
	self:_AddEvents()
	self:_RegNetFacade()
end

--@brief 更新
function BaseModel:Tick()
	for i,panel in pairs(self.m_tPanelList) do
		if panel.Update then
			panel:Tick(deltaTime)
		end
	end
end

--@brief 移除
function BaseModel:Destroy()
	if self.m_tPanelList then
		for i,panel in pairs(self.m_tPanelList) do
			panel:Destroy()
		end
		self.m_tPanelList = nil
	end

	self:_RemoveEvents()
	self:_UnRegNetFacade()
end


--@brief 获取面板节点
function BaseModel:_GetCanvasRoot()
	if not self.m_canvasRoot then
		self.m_canvasRoot = CSGameObject.Find(self.m_canvasName).transform
	end
	return self.m_canvasRoot
end

--@brief 设置面板节点
function BaseModel:SetCanvasRoot(parent)
	self.m_canvasRoot = parent
end

--@breif 显示面板
function BaseModel:ShowPanel( panelType, panelData )
	if self.m_tPanelList[panelType] then
		if self.m_tPanelList[panelType].Show then
			self.m_tPanelList[panelType]:Show(panelData)
		end
	else
		self.m_tPanelList[panelType] = self:CreatePanel(panelType, panelData)
	end
end

function BaseModel:HidePanel(panelType)
	if self.m_tPanelList[panelType] then
		if self.m_tPanelList[panelType].Hide then
			self.m_tPanelList[panelType]:Hide()
		end
	--else
		--GCSLog("BaseModel:HidePanel","found out",panelType)
	end
end


function BaseModel:CreatePanel(panelType, panelData)
	local panel = {}
	setmetatable( panel, { __index = self.m_panelDefine[panelType] })
	panel:_LoadAssetPanel(self:_GetCanvasRoot(), self, panelData)
	return panel
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

--@brief 子类重写 - 模块初始化
function BaseModel:onInitModel()
end

--@brief 子类重写 - 添加事件监听
function BaseModel:_AddEvents( )
end

--@brief 子类重写 - 移除事件监听
function BaseModel:_RemoveEvents( )
end

--@brief 子类重写 - 注册网络门户
function BaseModel:_RegNetFacade( )
end

--@brief 子类重写 - 注销网络门户
function BaseModel:_UnRegNetFacade( )
end