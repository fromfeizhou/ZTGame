local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSAssetManager = CS.AssetManager

UIBasePanel = {
	m_model = nil,
	m_isShow = true,
	m_tPanelData = nil,
	m_gameObject = nil,
	m_transform = nil,
	m_rectTransform = nil,
	m_panelName = nil,
	m_LoadFinish = false,
}

--@brief 面板资源相对模块路径
function UIBasePanel:GetRelativePath()
	return ""
end

function UIBasePanel:AwakeShow()
	LogC("UIBasePanel:AwakeShow",true)
	return true
end

function UIBasePanel:GetName()
	return "UIBasePanel"
end

function UIBasePanel:GetLayerType()
	return LAYER_TYPE.NORMAL
end

function UIBasePanel:GetCanvas()
	return PanelManager:GetLayerCanvas(self:GetLayerType())
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
function UIBasePanel:_LoadAssetPanel(parent, model)
	self.m_model = model
	local callback_loadfinish = function(target,path)
 		if target then
 			self.m_gameObject = CSGameObject.Instantiate(target,parent)
 			self.m_transform = self.m_gameObject.transform
 			self.m_rectTransform = self.m_transform:GetComponent("RectTransform")

			self:_OnCreatePanel()
			self:_InitPanel()
			self.m_LoadFinish = true
			self:_Rush()
		else
			GCSLog("UIBasePanel:Create","found out panel.",self.m_panelName,path)
		end
	end

	local panelName = model:GetName() .."/"..self:GetRelativePath() .. self:GetName()
	CSAssetManager.LoadAsset(PathManager:GetUIPanel(panelName),callback_loadfinish)
	return self
end

--@brief 显示面板
function UIBasePanel:Show(panelData)
	self.m_tPanelData = panelData
	self.m_isShow = true
	if panelData and panelData.defHide then
		self.m_isShow = false
	end
	self:_Rush()
end

--@brief 隐藏面板
function UIBasePanel:Hide()
	self.m_isShow = false
	self:_Rush()
end

function UIBasePanel:_Rush()
	if self.m_LoadFinish then
		self.m_gameObject:SetActive(self.m_isShow)
		self:onRush()
		if self.m_isShow then
			self:onShow()
		else
			self:onHide()
		end
	end
end

--@brief 面板创建后
function UIBasePanel:_OnCreatePanel( panelGo )
	self:onCreatePanel()
	self:_AddEvents()
	self:_RegNetFacade()
end

--@brief 面板初始化
function UIBasePanel:_InitPanel()
	self:onInitPanel()
end

--@brief 面板每帧刷新
function UIBasePanel:Tick(deltaTime)
	if self.m_LoadFinish and self.m_isShow then 
		self:onTick(deltaTime)
	end
end

--@brief 销毁面板
function UIBasePanel:Destroy()
	self.m_LoadFinish = false
	CSGameObject.Destroy(self.m_gameObject)
	self:_RemoveEvents()
	self:_UnRegNetFacade()
	self:onDestroy()
end

--@brief 子类重写 - 面板被创建
function UIBasePanel:onCreatePanel()
end

--@brief 子类重写 - 面板初始化
function UIBasePanel:onInitPanel()
end

--@brief 子类重写 - 面板更新
function UIBasePanel:onRush()
end

--@brief 子类重写 - 面板每帧更新
function UIBasePanel:onTick(deltaTime)
end

--@brief 子类重写 - 面板被销毁
function UIBasePanel:onDestroy()
end

--@brief 子类重写 - 显示面板
function UIBasePanel:onShow()
end

--@brief 子类重写 - 隐藏面板
function UIBasePanel:onHide()
end

--@brief 子类重写 - 添加事件监听
function UIBasePanel:_AddEvents( )
end

--@brief 子类重写 - 移除事件监听
function UIBasePanel:_RemoveEvents( )
end

--@brief 子类重写 - 注册网络门户
function UIBasePanel:_RegNetFacade( )
end

--@brief 子类重写 - 注销网络门户
function UIBasePanel:_UnRegNetFacade( )
end
