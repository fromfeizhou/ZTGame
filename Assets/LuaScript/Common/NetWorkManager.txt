--NetWorkManager.txt
--@breif 
--@data 2018/3/5
NetWorkManager = {
	m_instance,
}

--@brief c#引用
local CSNetWorkManager = CS.NetWorkManager
local CSLog = GCSLog
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 初始化
function NetWorkManager:Init()
	CSLog("NetWorkManager:Init()")
	NetWorkManager.m_instance = CSNetWorkManager.GetInstance()
	NetWorkManager.m_instance:Init()
	--[[设置网络消息回调]]
	local func = function(protocal, buffer)
		NetWorkManager:_CallProtocal(protocal, buffer)
	end
	NetWorkManager.m_instance:SetDelegateReceiveMsg(func)
end

--@brief 请求连接服务器
function NetWorkManager:RequestConnect( addressData )
	self.m_instance:SetNetWorkAddress(addressData.host,addressData.port)
	self.m_instance:RequestConnect()
	CSLog("[NetWorkManager:RequestConnect]",SerializeTable(addressData))
end

--@brief 初始化服务器列表
function NetWorkManager:InitServerList()
	--[[服务器列表请求回调]]
	local func_WebRequest = function (result,data)
		if result then

			local serverList = {}
			local serverItemStrArr = Split(Trim(data),'\n')

			for i=1,#serverItemStrArr do
				local arr = Split(serverItemStrArr[i],'=')
				local netData = {}
				netData.name = arr[1]
				if #arr == 2 then
					local ipArr = Split(arr[2],':')
					if #ipArr ==2 then
						netData.host = ipArr[1]
						netData.port = ipArr[2]
					end
				end
				table.insert(serverList,netData)
			end
			GlobalData:GetNetEventDispatcher():DispatchEvent(NET_EVENT.SERVER_FINISH,serverList)
		else
			CSLog(data)
		end
	end
	NetWorkManager.m_instance:InitServerList("http://s1.game.gdxygm.com/info.txt",func_WebRequest)
end


function NetWorkManager:SendNetMessage(model, command, protobuf)
	-- body
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

Protocal = {
	Connect 	= 101,	--连接服务器
    Exception 	= 102,	--异常掉线
    Disconnect 	= 103,	--正常断线  
	NetMessage 	= 104,	--游戏逻辑数据
}

--@brief 网络消息回调
function NetWorkManager:_CallProtocal(protocal, buffer)
	if protocal == Protocal.Connect then
		self:_OnConnect()
	elseif protocal == Protocal.Exception then
		self:_OnException(buffer)
	elseif protocal == Protocal.Disconnect then
		self:_OnDisconnect()
	elseif protocal == Protocal.NetMessage then
		self:_OnNetMessage(buffer)
	end
end

function NetWorkManager:_OnConnect()
	CSLog("[NetWorkManager:_OnConnect]")
end

function NetWorkManager:_OnException(exception)
	CSLog("[NetWorkManager:_OnException]" .. exception)
end

function NetWorkManager:_OnDisconnect()
	CSLog("[NetWorkManager:_OnDisconnect]")
end

function NetWorkManager:_OnNetMessage(msgData)
	CSLog("[NetWorkManager:_OnNetMessage]" .. msgData)
end
