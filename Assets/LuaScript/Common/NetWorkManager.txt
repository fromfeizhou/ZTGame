--NetWorkManager.txt
--@breif 
--@data 2018/3/5
NetWorkManager = {
	m_instance,
}

--@brief c#引用
local CSNetWorkManager = CS.NetWorkManager
local CSLog = GCSLog
local  CSByteBuffer = CS.ByteBuffer



--@brief 当前次登录验证信息
local _loginAuthKey
--@brief 当前消息序号
local _curMsgSeq

--@brief 协议类型定义
Protocal = {
	Connect 	= 101,	--连接服务器
    Exception 	= 102,	--异常掉线
    Disconnect 	= 103,	--正常断线  
	NetMessage 	= 104,	--游戏逻辑数据
}

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 初始化
function NetWorkManager:Init()
	CSLog("NetWorkManager:Init()")
	NetWorkManager.m_instance = CSNetWorkManager.GetInstance()
	NetWorkManager.m_instance:Init()
	--[[设置网络消息回调]]
	local func = function(protocal, buffer)
		NetWorkManager:_CallProtocal(protocal, buffer)
	end
	NetWorkManager.m_instance:SetDelegateReceiveMsg(func)
end


--@brief 请求连接服务器
function NetWorkManager:RequestConnect( addressData )
	self.m_instance:SetNetWorkAddress(addressData.host,addressData.port)
	self.m_instance:RequestConnect()
	CSLog("[NetWorkManager:RequestConnect]",SerializeTable(addressData))
end

--@brief 初始化服务器列表
function NetWorkManager:InitServerList()
	--[[服务器列表请求回调]]
	local func_WebRequest = function (result,data)
		if result then

			local serverList = {}
			local serverItemStrArr = Split(Trim(data),'\n')

			for i=1,#serverItemStrArr do
				local arr = Split(serverItemStrArr[i],'=')
				local netData = {}
				netData.name = arr[1]
				if #arr == 2 then
					local ipArr = Split(arr[2],':')
					if #ipArr ==2 then
						netData.host = ipArr[1]
						netData.port = ipArr[2]
					end
				end
				table.insert(serverList,netData)
			end
			GlobalData:GetNetEventDispatcher():DispatchEvent(NET_EVENT.SERVER_FINISH,serverList)
		else
			CSLog(data)
		end
	end
	NetWorkManager.m_instance:InitServerList("http://s1.game.gdxygm.com/info.txt",func_WebRequest)
end

--@brief 发送网络消息包
function NetWorkManager:SendNetMsg(package)
	local byteBuff = CSByteBuffer()
	byteBuff:WriteUInt16(0)
	byteBuff:WriteByte(package.model)
	byteBuff:WriteByte(package.command)
	
	if package.data and #package.data > 0  then		
		local model_pb = MODEL_PB[package.model][package.command] .. "_c2s"
		local encode = ZTProtoData.m_pb.encode(model_pb, package.data)
		byteBuff:WriteBytes(encode)
	end
	local messageData = byteBuff:ToBytes()
	byteBuff:Close()
	self.m_instance:SendSocketMessage(messageData)
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 获取当前消息序号
function GetCurMsgSeq()
	_curMsgSeq = _curMsgSeq + _loginAuthKey.unique_add;
	if _curMsgSeq > _loginAuthKey.max_unique_id then
		_curMsgSeq = _loginAuthKey.unique_id
	end
	return _curMsgSeq;
end

--@brief 网络消息回调
function NetWorkManager:_CallProtocal(protocal, buffer)
	if protocal == Protocal.Connect then
		self:_OnConnect()
	elseif protocal == Protocal.Exception then
		self:_OnException(buffer)
	elseif protocal == Protocal.Disconnect then
		self:_OnDisconnect()
	elseif protocal == Protocal.NetMessage then
		self:_OnNetMessage(buffer)
	end
end

--@brief 网络状态事件 - 连接完成
function NetWorkManager:_OnConnect()
	self:_Request_Login_Auth_Key()
end

--@brief 网络状态事件 - 网络发生异常
function NetWorkManager:_OnException(exception)
	GCSLog("[NetWorkManager:_OnException]" , exception:ReadString())
end

--@brief 网络状态事件 - 网络断线
function NetWorkManager:_OnDisconnect()
	CSLog("[NetWorkManager:_OnDisconnect]")
end

--@brief 网络状态事件 - 接收到服务器消息
function NetWorkManager:_OnNetMessage(msgData)
	local model = msgData:ReadByte()
	local command = msgData:ReadByte()
	local len = msgData:GetLength ()
	local pbData = msgData:ReadBytes(len - 2)
	local model_pb = MODEL_PB[model][command] .. "_s2c"
	local decode = ZTProtoData.m_pb.decode(model_pb , pbData)
	self:OnReceive(model,command,decode);
end


--@brief pb数据处理逻辑
function NetWorkManager:OnReceive(model,command,pbData)
	if model == PB_LOGIN.MODEL and command == PB_LOGIN.AUTH_KEY then
		_loginAuthKey = pbData
	end
end

--@brief 发送心跳
function NetWorkManager:_SendHeard()
	local vo_heart = {}
	NetWorkManager:SendNetMessage(1,0,vo_heart)
end

--@brief 请求登录验证
function NetWorkManager:_Request_Login_Auth_Key(  )
	local package 	= {}
	package.model 	= PB_LOGIN.MODEL
	package.command = PB_LOGIN.AUTH_KEY
	self:SendNetMsg(package)
end
