--PanelManager.txt
--@breif 面板管理器
--@data 2018/3/5
--@brief c#引用

local CSGameObject = CS.UnityEngine.GameObject
local CSTransform = CS.UnityEngine.Transform
local CSCamera = CS.UnityEngine.Camera
local CSCanvas = CS.UnityEngine.Canvas
local CSAssetManager = CS.AssetManager

PanelManager = {
	m_uiRoot = nil,
	m_layerList = {},
	m_panelList = {},
	m_panelDefine = {},
}

LAYER_TYPE = { 
	BOTTOM = "Bottom",
	NORMAL = "Normal",
	TOP = "Top",
	MASK = "Mask",
}
setmetatable( PanelManager, { __index = BaseManager})

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
function PanelManager:Create(callbackInitFinish)
	GCSLog("PanelManager:Create")
	local obj = {}
	setmetatable( obj, { __index = PanelManager })
	obj.m_callbackInitFinish = callbackInitFinish
	obj:_LoadUIRoot()
	return obj
end


function PanelManager:_LoadUIRoot()
	local callback_loadfinish = function(target,path)
 		if target then
 			self.m_uiRoot = CSGameObject.Instantiate(target)
 			self:Init()
		end
	end
	CSAssetManager.LoadAsset(PathManager:GetUIPanel("UIRoot"),callback_loadfinish)
end

--@brief 初始化
function PanelManager:Init()
	CSGameObject.DontDestroyOnLoad(self.m_uiRoot)
	self:_InitLayer(LAYER_TYPE.BOTTOM)
	self:_InitLayer(LAYER_TYPE.NORMAL)
	self:_InitLayer(LAYER_TYPE.TOP)
	self:_InitLayer(LAYER_TYPE.MASK)
	self:_RegLoginPanel()
	self:_onFinish()
end

function PanelManager:_RegLoginPanel()
	self.m_panelDefine[SYSTEM_TYPE.NOTICE] 		= SystemNoticePanel
	self.m_panelDefine[SYSTEM_TYPE.LOCK] 		= SystemLockPanel
	self.m_panelDefine[SYSTEM_TYPE.LOADING]		= SystemLoadingPanel
	self.m_panelDefine[SYSTEM_TYPE.TIP]			= SystemTipPanel
	
	self.m_panelDefine[LOGIN_TYPE.MAIN] 		= LoginMainPanel
	self.m_panelDefine[LOGIN_TYPE.CREATEROLE] 	= LoginCreateRolePanel
end

function PanelManager:_RegGamePanel()
	self.m_panelDefine[CITY_TYPE.MAIN] 			= CityMainPanel
	self.m_panelDefine[BATTLE_TYPE.MAIN] 		= BattleMainPanel
	self.m_panelDefine[BATTLE_TYPE.MATCH]       = MatchPanel
	self.m_panelDefine[BATTLE_TYPE.BATTLEEND]	= BattleEndPanel
end

function PanelManager:_InitLayer(layerType)
	local canvaTrans = self.m_uiRoot.transform:Find(layerType .. "/Canvas")
	local layerTab = {
		layerRoot = canvaTrans,
		layerCanvas = canvaTrans:GetComponent("Canvas"),
		layerCanvasScaler = canvaTrans:GetComponent("CanvasScaler"),
	}
	self.m_layerList[layerType] = layerTab
end

--@brief 获取面板
function PanelManager:GetPanel(model, panelType)
	if not self.m_panelList[panelType] then
		return self:_CreatePanel(model, panelType)
	end
	return self.m_panelList[panelType]
end

--@brief 创建面板
function PanelManager:_CreatePanel(model, panelType)
	local panel = {}
	setmetatable( panel, { __index = self.m_panelDefine[panelType] })
	local layerType = panel:GetLayerType()
	local layer = self.m_layerList[layerType].layerRoot
	panel:_LoadAssetPanel(layer, model)
	self.m_panelList[panelType] = panel
	return panel
end

--@brief 销毁面板
function PanelManager:DestroyPanel( panelType )
	if self.m_panelList[panelType] then
		self.m_panelList[panelType]:Destroy()
		self.m_panelList[panelType] = nil
	end
end

--@brief 获取Canvas节点
function PanelManager:GetLayerRoot(layerType)
	return self.m_layerList[layerType].layerRoot
end

--@brief 获取Canvas对象
function PanelManager:GetLayerCanvas(layerType)
	return self.m_layerList[layerType].layerCanvas
end

--@brief 获取CanvasScaler对象
function PanelManager:GetLayerCanvasScaler(layerType)
	return self.m_layerList[layerType].layerCanvasScaler
end


--@brief 显示Loading界面
--@brief 参数：sensitivity 灵敏度
function PanelManager:ShowLoadingPanel(sensitivity)
	local panel = self.m_panelList[SYSTEM_TYPE.LOADING]
	if panel then
		if sensitivity then
			panel:SetSensitivity(sensitivity)
		end
		panel:Show()
	end
end

--@brief 隐藏Loading界面
function PanelManager:HideLoadingPanel()
	local panel = self.m_panelList[SYSTEM_TYPE.LOADING]
	if panel then
		panel:Hide()
	end
end

--@brief 设置Loading界面进度
function PanelManager:SetLoadingProgress( progress, force )
	local panel = self.m_panelList[SYSTEM_TYPE.LOADING]
	if panel then
		panel:SetProgress(progress, force)
	end
end

function PanelManager:ShowTip(tipStr, iShowTime, iOffSet)
	LogC("PanelManager:ShowTip", tipStr)
	local panel = self.m_panelList[SYSTEM_TYPE.TIP]
	if panel then
		local tipData = {
			tip = tipStr,
			showTime = iShowTime,
			offSet = iOffSet,
		}
		panel:AddTip(tipData)
	end
end