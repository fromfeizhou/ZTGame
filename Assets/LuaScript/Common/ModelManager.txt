--ModelManager.txt
--@breif 
--@data 2018/3/5

--@brief c#引用
local CSModelManager = CS.ModelManager
local CSTime = CS.Time


ModelManager = {
	m_modelList = nil,
	m_modelDef = nil,

	m_mdlEvent = nil,
}

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Begin*************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 拷贝原表
function ModelManager:Create()
	GCSLog("ModelManager:Create")
	local obj = {}
	setmetatable( obj, { __index = ModelManager })
	obj:Init()
	return obj
end


--@brief 初始化
function ModelManager:Init()
	ModelManager.m_modelList = {}
	ModelManager.m_modelDef = {}
	ModelManager.m_mdlEvent = GlobalData:GetMdlEventDispatcher()
	ModelManager:_AddEvents()
end

--@brief 更新模块列表中的模块逻辑
function ModelManager:Update()
	ModelManager:_UpdatePanel(CSTime.deltaTime)
end

--@breif 移除
function ModelManager:Destroy()
	ModelManager:_RemoveEvents()
end



--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@breif 添加监听模块事件
function ModelManager:_AddEvents()
	ModelManager.m_mdlEvent:AddEvent(MDL_EVENT.SHOW_PANEL,ModelManager._OnHandle_Show,ModelManager)
	ModelManager.m_mdlEvent:AddEvent(MDL_EVENT.HIDE_PANEL,ModelManager._OnHandle_Hide,ModelManager)
end

--@breif 移除模块事件
function ModelManager:_RemoveEvents()
	ModelManager.m_mdlEvent:RemoveEvent(MDL_EVENT.SHOW_PANEL,ModelManager._OnHandle_Show)
	ModelManager.m_mdlEvent:RemoveEvent(MDL_EVENT.HIDE_PANEL,ModelManager._OnHandle_Hide)

end

--@breif 事件句柄 显示面板
function ModelManager:_OnHandle_Show(panelData)
	local model = ModelManager:_GetModel(panelData.modelType)
	if model then
		model:ShowPanel(panelData.panelType)
	else
		GCSLog("ModelManager:_OnHandle_Show found out ",panelData.panelType)
	end
end

--@breif 事件句柄 隐藏面板
function ModelManager:_OnHandle_Hide(panelData)
	local model = ModelManager:_GetModel(panelData.modelType)
	if model then
		model:HidePanel(panelData.panelType)
		ModelManager:_TryCleanModel()
	else
		GCSLog("ModelManager:_OnHandle_Hide found out ",panelData.panelType)
	end
end


--@brief 刷新当前缓存中的面板
function ModelManager:_UpdatePanel( deltaTime )
	if ModelManager.m_modelList then
		for k,model in pairs(ModelManager.m_modelList) do
			if model.m_tPanelList then
				for i,panel in pairs(model.m_tPanelList) do
					panel:Update(deltaTime)
				end
			end
		end
	end
end


--@breif 尝试清理模块
function ModelManager:_TryCleanModel(model)
	if not model then return end
	if model.m_tPanelList == nil or #model.m_tPanelList == 0 then
		ModelManager:_RemoveModel(model);
	end
end

--@breif 获取模块
function ModelManager:_GetModel( modelType )
	if not ModelManager.m_modelList[modelType] then
		local model = ModelManager:_CreateModel(modelType)
		if model then
			ModelManager:_AddModel(modelType,model)
		else
			GCSLog("ModelManager:_GetModel",modelType)
		end
	end
	return ModelManager.m_modelList[modelType]
end

--@breif 创建模块
function ModelManager:_CreateModel( modelType)
	GCSLog("[ModelManager:_CreateModel]",modelType)
	local modelTemplate = nil
	local model = nil
	if modelType == MODEL_TYPE.SYSTEM then 
		modelTemplate = SystemModel
	elseif modelType == MODEL_TYPE.LOGIN then 
		modelTemplate = LoginModel
	elseif modelType == MODEL_TYPE.CITY then 
		modelTemplate = CityModel
	end

	if modelTemplate then
		model = modelTemplate:Create()
	end
	return model
end

--@breif 添加模块到缓存列表
function ModelManager:_AddModel(modelType, model )
	if ModelManager.m_modelList[model] then return end
	ModelManager.m_modelList[modelType] = model
end

--@breif 从缓存列表中移除模块
function ModelManager:_RemoveModel(model)
	if not ModelManager.m_modelList[model] then return end
	ModelManager.m_modelList[model]:Destroy()
	ModelManager.m_modelList[model] = nil
end
