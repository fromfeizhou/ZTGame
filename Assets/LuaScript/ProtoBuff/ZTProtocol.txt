ZTProtocol = {
	m_Protocol = nil,
	m_eventDispatcher = nil,
}
--@brief 拷贝原表
function ZTProtocol:Create()
	local obj = {}
	setmetatable( obj, { __index = ZTProtocol })
	obj:Init()
	return obj
end

--@brief 初始化
function ZTProtocol:Init()
	self.m_Protocol = {}
	self.m_eventDispatcher = EventDispatcher:Create()
end

--@brief 移除
function ZTProtocol:Destroy()
	if self.m_eventDispatcher then
		self.m_eventDispatcher = nil
	end
end

--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public Start***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 注册
function ZTProtocol:Register(model, command, delegates, target)
	local key = self:_GetKey(model,command)
	self.m_eventDispatcher:AddEvent(key,delegates,target)
end

--@brief 注销
function ZTProtocol:Unregister(model, command, delegates)
	local key = self:_GetKey(model,command)
	self.m_eventDispatcher:RemoveEvent(key,delegates)
end

--@brief 调用
function ZTProtocol:Invoking(model, command, pbData)
	local key = self:_GetKey(model,command)
	
	--GCSLog("ZTProtocol:Invoking",key)
	self.m_eventDispatcher:DispatchEvent(key,pbData)
end
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--*******************************************************Public End***************************************************************
--————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
--@brief 获取Key值
function ZTProtocol:_GetKey(model, command)
	return model .. command
end